setwd("~/Documents/GitHub/EpistasisSim/Empt0snps")
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/EmpT0snps")
mult <- 6
iter = 1000
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1000)
a <- rep(c(8,-8,0, 0, 40, 0), each = 1000)
s <- rep(c(0,0,0,0.1,0,0), each = 1000)
r <- rep(c(0,0,0,-75,0,0), each = 1000)
b <- rep(c(0,0,0,-0.41,-0.395,0), each = 1000)
mu <- rep(c(0,0,0,0,0,0.435), each = 1000)
std <- rep(c(0,0,0,0,0,0.0175), each = 1000)
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/EmpT0snps")
mult <- 6
iter = 1000
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1000)
a <- rep(c(8,-8,0, 0, 40, 0), each = 1000)
s <- rep(c(0,0,0,0.1,0,0), each = 1000)
r <- rep(c(0,0,0,-75,0,0), each = 1000)
b <- rep(c(0,0,0,-0.41,-0.395,0), each = 1000)
mu <- rep(c(0,0,0,0,0,0.435), each = 1000)
std <- rep(c(0,0,0,0,0,0.0175), each = 1000)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
fwrite(dat, file = 'Cluster/MutDriftBalance/params.txt', col.names = F)
fmin <- 0
fmax <- 1
npops <- rep(10, times = mult * iter)
popsize <- 1750
scaleT0 <- 0
scales <- 0
###############
## Test data ##
###############
setwd("~/Documents/GitHub/EpistasisSim")
mult <- 3
iter = 2
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential",
#                          "exponential",
#                          "multiplicative"), each = 2)
fitnessFunction <- rep(c(1,1,2), each = 2)
a <- rep(c(8,-8,0), each = 2)
s <- rep(c(0,0,0), each = 2)
r <- rep(c(0,0,0), each = 2)
b <- rep(c(0,0,0), each = 2)
mu <- rep(c(0,0,0), each = 2)
std <- rep(c(0,0,0), each = 2)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
# fwrite(dat, file = 'Cluster/testparams.txt', col.names = F)
# # read.csv(file = "figure1parms.txt")
#
#
#
# "slim -d seed=", seeds[i],
# " -d npops=", npops,
# " -d nloci=", nloci,
# " -d popsize=", popsize,
# " -d " ,'"', 'fitnessFunction=', "'", 'exponential', "'", '"',
# " -d fmin=", fmin,
# " -d fmax=", fmax,
# " -d a=", ahat,
# " -d scaleT0=", scaleT0,
# " -d scales=", scales,
# " New.slim | tail -n +14 > output/exponential",
# "_seed=", seeds[i],
# "_a=", ahat,
# "_b=", bhat, ".csv", sep = ""))
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/EmpT0hb")
mult <- 6
iter = 1000
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1000)
a <- rep(c(8,-8,0, 0, 40, 0), each = 1000)
s <- rep(c(0,0,0,0.1,0,0), each = 1000)
r <- rep(c(0,0,0,-75,0,0), each = 1000)
b <- rep(c(0,0,0,-0.41,-0.395,0), each = 1000)
mu <- rep(c(0,0,0,0,0,0.435), each = 1000)
std <- rep(c(0,0,0,0,0,0.0175), each = 1000)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
# fwrite(dat, file = 'params.txt', col.names = F)
fmin <- 0
fmax <- 1
npops <- rep(10, times = mult * iter)
popsize <- 1750
scaleT0 <- 0
scales <- 0
###############
## Test data ##
###############
setwd("~/Documents/GitHub/EpistasisSim/EmpT0hb")
mult <- 3
iter = 2
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential",
#                          "exponential",
#                          "multiplicative"), each = 2)
fitnessFunction <- rep(c(1,1,2), each = 2)
a <- rep(c(8,-8,0), each = 2)
s <- rep(c(0,0,0), each = 2)
r <- rep(c(0,0,0), each = 2)
b <- rep(c(0,0,0), each = 2)
mu <- rep(c(0,0,0), each = 2)
std <- rep(c(0,0,0), each = 2)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
# fwrite(dat, file = 'testparams.txt', col.names = F)
# # read.csv(file = "figure1parms.txt")
#
#
#
# "slim -d seed=", seeds[i],
# " -d npops=", npops,
# " -d nloci=", nloci,
# " -d popsize=", popsize,
# " -d " ,'"', 'fitnessFunction=', "'", 'exponential', "'", '"',
# " -d fmin=", fmin,
# " -d fmax=", fmax,
# " -d a=", ahat,
# " -d scaleT0=", scaleT0,
# " -d scales=", scales,
# " New.slim | tail -n +14 > output/exponential",
# "_seed=", seeds[i],
# "_a=", ahat,
# "_b=", bhat, ".csv", sep = ""))
fwrite(dat, file = 'params.txt', col.names = F)
fwrite(dat, file = 'testparams.txt', col.names = F)
library(data.table)
library(ggraptR)
setwd("~/Documents/GitHub/EpistasisSim/Empt0snps")
setwd("~/Documents/GitHub/EpistasisSim/EmpT0snps")
empjaccs <- readRDS(file = 'hap_block_snps.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = '../results/EmpT0/sim.results.csv'))
jaccmatrix[1:5,1:5]
jaccmatrix <- jaccmatrix[-1,-1]
treatment <- c(rep(c("B. Positive Epistasis",
"C. Negative Epistasis",
"A. Multiplicative",
"D. Directional QT",
"E. Truncating QT",
"F. Stabilizing QT"), each = 2000),
rep("G. Empirical", each = 2))
generation <- c(rep(c(6,10), each = 1000, times = 6),
c(6,10))
jaccards <- c()
for(i in 1:12){
jaccards <- c(jaccards, jaccmatrix[3:1002,i])
}
jaccards <- as.numeric(c(jaccards, empjaccs))
data <- data.frame(treatment, generation, jaccards)
ggraptR(data)
rm(list = ls())
hap_blocks.neutral_AFC_cutoffs <- readRDS("~/Documents/GitHub/EpistasisSim/EmpT0hb/hap_blocks.neutral_AFC_cutoffs.RDS")
hap_blocks.jaccard.neutral999 <- readRDS("~/Documents/GitHub/EpistasisSim/EmpT0hb/hap_blocks.jaccard.neutral999.RDS")
hap_blocks.res <- readRDS("~/Documents/GitHub/EpistasisSim/EmpT0hb/hap_blocks.res.RDS")
rm(list = ls())
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/EmpT0hb/")
x <- readRDS(file = "hap_blocks.res.RDS")
y <- readRDS("hap_block.neutral_AFC_cutoffs.RDS")
y <- readRDS("hap_blocks.neutral_AFC_cutoffs.RDS")
tmpdata <- cbind(x$chr, x$start, x$stop, x$tag, y$T0, x$selCoef, x$cov, y$Gen10_neutAFC99, y$Gen10_neutAFC999)
tmpdata <- data.frame(tmpdata)
colnames(tmpdata) <- c("chr", 'start', 'stop', 'haplotype_block', 'T0', 'selCoef', 'cov', 'Gen10_neutAFC99', 'Gen10_neutAFC999')
tmpdata$pos <- as.integer(tmpdata$pos)
tmpdata$T0 <- as.numeric(tmpdata$T0)
tmpdata$start <- as.integer(tmpdata$start)
tmpdata$stop <- as.integer(tmpdata$stop)
tmpdata$T0 <- as.numeric(tmpdata$T0)
tmpdata$selCoef <- as.numeric(tmpdata$selCoef)
tmpdata$cov <- as.integer(tmpdata$cov)
tmpdata$Gen10_neutAFC99 <- as.numeric(tmpdata$Gen10_neutAFC99)
tmpdata$Gen10_neutAFC999 <- as.numeric(tmpdata$Gen10_neutAFC999)
sorteddata <- c()
for(haps in unique(tmpdata$haplotype_block)){
hapdata <- tmpdata[which(tmpdata$haplotype_block == haps),]
sorteddata <- rbind(sorteddata,hapdata[order(as.integer(hapdata$pos)),])
}
unique(tmpdata$haplotype_block)
hapdata <- tmpdata[which(tmpdata$haplotype_block == haps),]
sorteddata <- c()
for(haps in unique(tmpdata$haplotype_block)){
hapdata <- tmpdata[which(tmpdata$haplotype_block == haps),]
sorteddata <- rbind(sorteddata,hapdata[order(as.integer(hapdata$pos)),])
}
unique(tmpdata$haplotype_block)
tmpdata[which(tmpdata$haplotype_block == haps),]
sorteddata <- rbind(sorteddata,hapdata[order(as.integer(hapdata$start)),])
sorteddata <- c()
for(haps in unique(tmpdata$haplotype_block)){
hapdata <- tmpdata[which(tmpdata$haplotype_block == haps),]
sorteddata <- rbind(sorteddata,hapdata[order(as.integer(hapdata$start)),])
}
write.csv(sorteddata, file = "sortedhbdata.csv")
