#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
seed <- sample(1:2^34, 7800)
rm(list = ls())
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
mult <- 6
iter = 1000
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
seed <- sample(1:2^34, 7800)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1300)
a <- rep(c(8,-8,0, 0, 10, 0), each = 1300)
s <- rep(c(0,0,0,0.1,0,0), each = 1300)
r <- rep(c(0,0,0,-15,0,0), each = 1300)
b <- rep(c(0,0,0,-0.3,-0.25,0), each = 1300)
mu <- rep(c(0,0,0,0,0,0.4), each = 1300)
std <- rep(c(0,0,0,0,0,0.07), each = 1300)
nloci <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 100, times = 6)
sim <- 0:(7800-1)
dat <- cbind(seed, fitnessFunction, a, s, r, b, mu, std, nloci, sim)
fwrite(dat, file = 'params.txt', col.names = F)
sampledloci <- array(dim = c(7800, 121))
setwd("/media/nathan/T7/EpistasisSim/nlocihb")
setwd("/Volumes/T7/EpistasisSim/nlocihb")
# setwd("/media/nathan/T7/EpistasisSim/nlocihb")
setwd("/Volumes/T7/EpistasisSim/nlocihb")
# setwd("/media/nathan/T7/EpistasisSim/nlocihb")
setwd("/Volumes/T7/EpistasisSim/nlocihb")
filenames <- list.files(path = './SLiMouts/')
########################
## Internal Functions ##
########################
parsefilenames <- function(filenames){
FFs <- c("positive",
"negative", # 1
"multiplicative", # 2
"directional", # 3
"diminishingReturns", # 4
"stabilizing") # 5
for(ff in FFs){
system(paste("mkdir ./SLiMOuts/", ff, sep = ""))
}
for(i in 1:length(filenames)){
split <- strsplit(filenames[i], "_")[[1]]
split[length(split)] <- substr(split[length(split)], 1, nchar(split[length(split)]) - 4)
if(split[1] == "ff=1" & split[3] == "a=-8") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/negative/", sep = ""))
if(split[1] == "ff=1" & split[3] == "a=8") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/positive/", sep = ""))
if(split[1] == "ff=2") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/multiplicative/", sep = ""))
if(split[1] == "ff=3") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/directional/", sep = ""))
if(split[1] == "ff=4") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/diminishingReturns/", sep = ""))
if(split[1] == "ff=5") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/stabilizing/", sep = ""))
}
}
parsefilenames(filenames = filenames)
GetJaccards <- function(rawout, cutoffs){
nloci <- length(cutoffs)
results <- array(dim = c(1,2))
for(gen in 1:2){
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
for(pop in 1:10){
popdat <- rawout[which(rawout[,2] == pop),]
if(gen == 1){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}else if(gen == 2){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}
}
jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
if(length(union(signsnps[[j]], signsnps[[k]])) == 0) jaccmat[j,k] <- 0
# cat("Intersect: ", length(intersect(signsnps[[j]], signsnps[[k]])))
# cat("    Union: ", length(union(signsnps[[j]], signsnps[[k]])), "\n")
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
if(gen == 1) results[,1] <- mean(jaccmat)
if(gen == 2) results[,2] <- mean(jaccmat)
}
return(results)
}
GetJaccards <- function(rawout, cutoffs){
nloci <- length(cutoffs)
results <- array(dim = c(1,2))
for(gen in 1:2){
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
for(pop in 1:10){
popdat <- rawout[which(rawout[,2] == pop),]
if(gen == 1){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}else if(gen == 2){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}
}
jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
if(length(union(signsnps[[j]], signsnps[[k]])) == 0) jaccmat[j,k] <- 0
# cat("Intersect: ", length(intersect(signsnps[[j]], signsnps[[k]])))
# cat("    Union: ", length(union(signsnps[[j]], signsnps[[k]])), "\n")
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
if(gen == 1) results[,1] <- mean(jaccmat)
if(gen == 2) results[,2] <- mean(jaccmat)
}
return(results)
}
GetJaccards <- function(rawout, cutoffs){
nloci <- length(cutoffs)
results <- array(dim = c(1,2))
for(gen in 1:2){
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
for(pop in 1:10){
popdat <- rawout[which(rawout[,2] == pop),]
if(gen == 1){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}else if(gen == 2){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}
}
jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
if(length(union(signsnps[[j]], signsnps[[k]])) == 0) jaccmat[j,k] <- 0
# cat("Intersect: ", length(intersect(signsnps[[j]], signsnps[[k]])))
# cat("    Union: ", length(union(signsnps[[j]], signsnps[[k]])), "\n")
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
if(gen == 1) results[,1] <- mean(jaccmat)
if(gen == 2) results[,2] <- mean(jaccmat)
}
return(results)
}
GetCutoffs <- function(rawout, sampledloci){
loci <- colnames(rawout)[3:ncol(rawout)]
loci <- substr(loci,5, nchar(loci))
loci <- as.numeric(loci) + 1
cutoffs <- empdata$Gen10_neutAFC999[loci]
names(cutoffs) <- loci
return(cutoffs)
}
library(data.table)
library(doMC)
library(doMC)
library(stringr)
library(foreach)
library(ggraptR)
library(data.table)
opts <- list(preschedule = FALSE)
registerDoMC(7)
setwd("~/Documents/GitHub/EpistasisSim/nlocihb/")
# setwd("~/Documents/GitHub/EpistasisSim/nlocihb/")
empdata <- fread(file = "sortedhbdata.csv")
sampledloci <- fread(file = "sampledloci.csv")
# setwd("/media/nathan/T7/EpistasisSim/nlocihb/")
setwd("/Volumes/T7/EpistasisSim/nlocihb")
FFs <- list.files(path = './SLiMouts/')
sim.results <- array(dim = c(103, 2 * length(FFs) * 13))
sim.results[1,] <- rep(c("positive",
"negative", # 1
"multiplicative", # 2
"directional", # 3
"diminishingReturns", # 4
"stabilizing"), # 5
each = 2, times = 13)
sim.results[2,] <- rep(c(6,10), each = 1, times = 6*13)
sim.results[3,] <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 12, times = 1)
ff = FFs[2]
i = 4
files <- list.files(path = paste("./SLiMouts/", ff, "/", sep = ''))
sim = files[i]
path <- paste("./SLiMouts/", ff, "/", sim, sep = '')
rawout <- read.csv(file = path)
rawout <- rawout[,-ncol(rawout)]
loci <- colnames(rawout)[3:ncol(rawout)]
loci <- substr(loci,5, nchar(loci))
loci <- as.numeric(loci) + 1
cutoffs <- empdata$Gen10_neutAFC999[loci]
names(cutoffs) <- loci
head(cutoffs)
cutoffs <- GetCutoffs(rawout = rawout, sampledloci = sampledloci)
nloci <- length(cutoffs)
results <- array(dim = c(1,2))
gen = pop = 1
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
popdat <- rawout[which(rawout[,2] == pop),]
which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)])
)
(popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)])
length(popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)])
popdat <- rawout[which(rawout[,2] == pop),]
if(gen == 1){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}else if(gen == 2){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}
which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)])
)
(popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci]
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
for(pop in 1:10){
popdat <- rawout[which(rawout[,2] == pop),]
if(gen == 1){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}else if(gen == 2){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}
}
jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
if(length(union(signsnps[[j]], signsnps[[k]])) == 0) jaccmat[j,k] <- 0
# cat("Intersect: ", length(intersect(signsnps[[j]], signsnps[[k]])))
# cat("    Union: ", length(union(signsnps[[j]], signsnps[[k]])), "\n")
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
if(gen == 1) results[,1] <- mean(jaccmat)
if(gen == 2) results[,2] <- mean(jaccmat)
sim
sim.results[1:5,1:5]
files <- list.files(path = paste("./SLiMouts/", ff, "/", sep = ''))
strsplit(files[1], "_")
# setwd("/media/nathan/T7/EpistasisSim/nlocihb/")
# setwd("/Volumes/T7/EpistasisSim/nlocihb")
FFs <- list.files(path = './SLiMouts/')
sim.results <- array(dim = c(103, 2 * length(FFs) * 13))
sim.results[1,] <- rep(c("positive",
"negative", # 1
"multiplicative", # 2
"directional", # 3
"diminishingReturns", # 4
"stabilizing"), # 5
each = 2, times = 13)
sim.results <- array(dim = c(103, 2 * length(FFs) * 13))
sim.results[1,] <- rep(c("positive",
"negative", # 1
"multiplicative", # 2
"directional", # 3
"diminishingReturns", # 4
"stabilizing"), # 5
each = 2, times = 13)
sim.results <- array(dim = c(103, 2 * length(FFs) * 13))
rep(c("positive",
"negative", # 1
"multiplicative", # 2
"directional", # 3
"diminishingReturns", # 4
"stabilizing"), # 5
each = 2, times = 13)
sim.results[1,] <- rep(c("positive",
"negative", # 1
"multiplicative", # 2
"directional", # 3
"diminishingReturns", # 4
"stabilizing"), # 5
each = 2, times = 13)
sim.results
dim(sim.results)
sim.results[2,] <- rep(c(6,10), each = 1, times = 6*13)
sim.results[3,] <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 12, times = 1)
str(sim.results)
splt <- strsplit(files, "_")
split
splt
splt <- as.matrix(strsplit(files, "_"))
splt[1:5,1:5]
splt <- as.matrix(strsplit(files, "_"))
?strsplit
splt <- unlist(strsplit(files, "_"))
splt <- do.call(rbind, strsplit(files, "_"))
splt
strsplit(files, "_")
calss(splt)
class(splt)
dim(splt)
splt[1:5,1:5]
splt[1,]
GetJaccards <- function(rawout, cutoffs){
nloci <- length(cutoffs)
results <- array(dim = c(1,2))
for(gen in 1:2){
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
for(pop in 1:10){
popdat <- rawout[which(rawout[,2] == pop),]
if(gen == 1){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}else if(gen == 2){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}
}
jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
if(length(union(signsnps[[j]], signsnps[[k]])) == 0) jaccmat[j,k] <- 0
# cat("Intersect: ", length(intersect(signsnps[[j]], signsnps[[k]])))
# cat("    Union: ", length(union(signsnps[[j]], signsnps[[k]])), "\n")
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
if(gen == 1) results[,1] <- mean(jaccmat)
if(gen == 2) results[,2] <- mean(jaccmat)
}
return(results)
}
GetCutoffs <- function(rawout){
loci <- colnames(rawout)[3:ncol(rawout)]
loci <- substr(loci,5, nchar(loci))
loci <- as.numeric(loci) + 1
cutoffs <- empdata$Gen10_neutAFC999[loci]
names(cutoffs) <- loci
return(cutoffs)
}
library(data.table)
library(doMC)
library(stringr)
library(foreach)
library(ggraptR)
library(data.table)
opts <- list(preschedule = FALSE)
registerDoMC(7)
setwd("/media/lee/HDD_Array/nwanderson/EpistasisSim/jacccalc/MutDrifthb/")
setwd("~/Documents/GitHub/EpistasisSim/nlocihb/")
# setwd("~/Documents/GitHub/EpistasisSim/nlocihb/")
empdata <- fread(file = "sortedhbdata.csv")
setwd("/Volumes/T7/EpistasisSim/nlocihb")
# setwd("/media/nathan/T7/EpistasisSim/nlocihb/")
# setwd("/Volumes/T7/EpistasisSim/nlocihb")
FFs <- list.files(path = './SLiMouts/')
sim.results <- array(dim = c(103, 2 * length(FFs) * 13))
sim.results[1,] <- rep(c("positive",
"negative", # 1
"multiplicative", # 2
"directional", # 3
"diminishingReturns", # 4
"stabilizing"), # 5
each = 2, times = 13)
sim.results[2,] <- rep(c(6,10), each = 1, times = 6*13)
sim.results[3,] <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 12, times = 1)
str(sim.results)
files <- list.files(path = paste("./SLiMouts/", ff, "/", sep = ''))
ff = FFs[1]
nloci = 10
files <- list.files(path = paste("./SLiMouts/", ff, "/", sep = ''))
splt <- do.call(rbind, strsplit(files, "_"))
nlocisims <- which(splt[,9] == paste("nloci=", nloci, sep = ""))
setwd("~/Documents/GitHub/EpistasisSim/nlocihb/")
library(data.table)
# setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
mult <- 6
iter = 1000
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
seed <- sample(1:2^34, 7800)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1300)
a <- rep(c(8,-8,0, 0, 10, 0), each = 1300)
s <- rep(c(0,0,0,0.1,0,0), each = 1300)
r <- rep(c(0,0,0,-15,0,0), each = 1300)
b <- rep(c(0,0,0,-0.3,-0.25,0), each = 1300)
mu <- rep(c(0,0,0,0,0,0.4), each = 1300)
std <- rep(c(0,0,0,0,0,0.07), each = 1300)
nloci <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 100, times = 6)
sim <- 0:(7800-1)
dat <- cbind(seed, fitnessFunction, a, s, r, b, mu, std, nloci, sim)
# fwrite(dat, file = 'params.txt', col.names = F)
sampledloci <- array(dim = c(7800, 121))
for(n in 1:length(nloci)){
sampledloci[n,1:nloci[n]] <- sample(0:120,nloci[n])
}
# fwrite(sampledloci, file = "sampledloci.csv", col.names = F)
fmin <- 0
fmax <- 1
npops <- rep(10, times = mult * iter)
popsize <- 1750
scaleT0 <- 0
scales <- 0
###############
## Test data ##
###############
mult <- 3
iter = 2
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential",
#                          "exponential",
#                          "multiplicative"), each = 2)
fitnessFunction <- rep(c(1,1,2), each = 2)
a <- rep(c(8,-8,0), each = 2)
s <- rep(c(0,0,0), each = 2)
r <- rep(c(0,0,0), each = 2)
b <- rep(c(0,0,0), each = 2)
mu <- rep(c(0,0,0), each = 2)
std <- rep(c(0,0,0), each = 2)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
# fwrite(dat, file = 'testparams.txt', col.names = F)
# # read.csv(file = "figure1parms.txt")
#
#
#
# "slim -d seed=", seeds[i],
# " -d npops=", npops,
# " -d nloci=", nloci,
# " -d popsize=", popsize,
# " -d " ,'"', 'fitnessFunction=', "'", 'exponential', "'", '"',
# " -d fmin=", fmin,
# " -d fmax=", fmax,
# " -d a=", ahat,
# " -d scaleT0=", scaleT0,
# " -d scales=", scales,
# " New.slim | tail -n +14 > output/exponential",
# "_seed=", seeds[i],
# "_a=", ahat,
# "_b=", bhat, ".csv", sep = ""))
library(data.table)
# setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
mult <- 6
iter = 1000
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
seed <- sample(1:2^34, 7800)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1300)
a <- rep(c(8,-8,0, 0, 10, 0), each = 1300)
s <- rep(c(0,0,0,0.1,0,0), each = 1300)
r <- rep(c(0,0,0,-15,0,0), each = 1300)
b <- rep(c(0,0,0,-0.3,-0.25,0), each = 1300)
mu <- rep(c(0,0,0,0,0,0.4), each = 1300)
std <- rep(c(0,0,0,0,0,0.07), each = 1300)
nloci <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 100, times = 6)
sim <- 0:(7800-1)
dat <- cbinad(seed, fitnessFunction, a, s, r, b, mu, std, nloci, sim)
# fwrite(dat, file = 'params.txt', col.names = F)
sampledloci <- array(dim = c(7800, 121))
for(n in 1:length(nloci)){
sampledloci[n,1:nloci[n]] <- sample(0:120,nloci[n])
}
# fwrite(sampledloci, file = "sampledloci.csv", col.names = F)
fmin <- 0
fmax <- 1
npops <- rep(10, times = mult * iter)
popsize <- 1750
scaleT0 <- 0
scales <- 0
###############
## Test data ##
###############
mult <- 3
iter = 2
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential",
#                          "exponential",
#                          "multiplicative"), each = 2)
fitnessFunction <- rep(c(1,1,2), each = 2)
a <- rep(c(8,-8,0), each = 2)
s <- rep(c(0,0,0), each = 2)
r <- rep(c(0,0,0), each = 2)
b <- rep(c(0,0,0), each = 2)
mu <- rep(c(0,0,0), each = 2)
std <- rep(c(0,0,0), each = 2)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
# fwrite(dat, file = 'testparams.txt', col.names = F)
# # read.csv(file = "figure1parms.txt")
#
#
#
# "slim -d seed=", seeds[i],
# " -d npops=", npops,
# " -d nloci=", nloci,
# " -d popsize=", popsize,
# " -d " ,'"', 'fitnessFunction=', "'", 'exponential', "'", '"',
# " -d fmin=", fmin,
# " -d fmax=", fmax,
# " -d a=", ahat,
# " -d scaleT0=", scaleT0,
# " -d scales=", scales,
# " New.slim | tail -n +14 > output/exponential",
# "_seed=", seeds[i],
# "_a=", ahat,
# "_b=", bhat, ".csv", sep = ""))
