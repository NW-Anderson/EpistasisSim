fmin = 0
fmax = 1
s = 1
r = 1
a = 8
b = 1
mu = 1
std = 1
par <- c(seed, npops, nloci, popsize, scaleT0, scales,
fitnessFunction, fmin, fmax, s, r, a, b, mu, std)
rm(list=ls()[-9])
paste("slim -d fmin=", fmin,
" -d fmax=", fmax,
" -d npops=", npops,
" -d nloci=", nloci,
" -d popsize=", popsize,
" -d scaleT0=", scaleT0,
" -d scales=0", scales,
" -d seed=", seed,
" -d fitnessFunction=", fitnessFunction,
" -d a=", a,
" -d s=", s,
" -d r=", r,
" -d b=", b,
" -d mu=", mu,
" -d std=", std,
" New.slim | tail -n +14 > ff=", fitnessFunction,
"_seed=", seed,
"_a=", a,
"_s=", s,
"_r=", r,
"_b=", b,
"_mu=", mu,
"_std=", std,
".csv", sep = "")
seed <- par[1]
npops <- par[2]
nloci <- par[3]
popsize <- par[4]
scaleT0 <- par[5]
scales <- par[6]
fitnessFunction <- par[7]
fmin <- par[8]
fmax <- par[9]
s <- par[10]
r <- par[11]
a <- par[12]
b <- par[13] * 100
mu <- par[14]
std <- par[15]
paste("slim -d fmin=", fmin,
" -d fmax=", fmax,
" -d npops=", npops,
" -d nloci=", nloci,
" -d popsize=", popsize,
" -d scaleT0=", scaleT0,
" -d scales=0", scales,
" -d seed=", seed,
" -d fitnessFunction=", fitnessFunction,
" -d a=", a,
" -d s=", s,
" -d r=", r,
" -d b=", b,
" -d mu=", mu,
" -d std=", std,
" New.slim | tail -n +14 > ff=", fitnessFunction,
"_seed=", seed,
"_a=", a,
"_s=", s,
"_r=", r,
"_b=", b,
"_mu=", mu,
"_std=", std,
".csv", sep = "")
system(paste("slim -d fmin=", fmin,
" -d fmax=", fmax,
" -d npops=", npops,
" -d nloci=", nloci,
" -d popsize=", popsize,
" -d scaleT0=", scaleT0,
" -d scales=0", scales,
" -d seed=", seed,
" -d fitnessFunction=", fitnessFunction,
" -d a=", a,
" -d s=", s,
" -d r=", r,
" -d b=", b,
" -d mu=", mu,
" -d std=", std,
" New.slim | tail -n +14 > ff=", fitnessFunction,
"_seed=", seed,
"_a=", a,
"_s=", s,
"_r=", r,
"_b=", b,
"_mu=", mu,
"_std=", std,
".csv", sep = ""))
system(paste("slim -d fmin=", fmin,
" -d fmax=", fmax,
" -d npops=", npops,
" -d nloci=", nloci,
" -d popsize=", popsize,
" -d scaleT0=", scaleT0,
" -d scales=0", scales,
" -d seed=", seed,
" -d fitnessFunction=", fitnessFunction,
" -d a=", a,
" -d s=", s,
" -d r=", r,
" -d b=", b,
" -d mu=", mu,
" -d std=", std,
" New.slim | tail -n +14 > ff=", fitnessFunction,
"_seed=", seed,
"_a=", a,
"_s=", s,
"_r=", r,
"_b=", b,
"_mu=", mu,
"_std=", std,
".csv", sep = ""))
# setwd(("/media/lee/HDD_Array/nwanderson/EpistasisSim"))
setwd("~/Documents/GitHub/EpistasisSim/ABC")
system(paste("slim -d fmin=", fmin,
" -d fmax=", fmax,
" -d npops=", npops,
" -d nloci=", nloci,
" -d popsize=", popsize,
" -d scaleT0=", scaleT0,
" -d scales=0", scales,
" -d seed=", seed,
" -d fitnessFunction=", fitnessFunction,
" -d a=", a,
" -d s=", s,
" -d r=", r,
" -d b=", b,
" -d mu=", mu,
" -d std=", std,
" New.slim | tail -n +14 > ff=", fitnessFunction,
"_seed=", seed,
"_a=", a,
"_s=", s,
"_r=", r,
"_b=", b,
"_mu=", mu,
"_std=", std,
".csv", sep = ""))
system(paste("slim -d fmin=", fmin,
" -d fmax=", fmax,
" -d npops=", npops,
" -d nloci=", nloci,
" -d popsize=", popsize,
" -d scaleT0=", scaleT0,
" -d scales=0", scales,
" -d seed=", seed,
" -d fitnessFunction=", fitnessFunction,
" -d a=", a,
" -d s=", s,
" -d r=", r,
" -d b=", b,
" -d mu=", mu,
" -d std=", std,
" New.slim | tail -n +14 > output/ff=", fitnessFunction,
"_seed=", seed,
"_a=", a,
"_s=", s,
"_r=", r,
"_b=", b,
"_mu=", mu,
"_std=", std,
".csv", sep = ""))
rawout <- as.matrix(read.csv(file = paste('./output/directional',
"_seed=", seed,
"_s=", s,
"_r=", r,
"_a=", a,
"_b=", b, ".csv", sep = "")))[,-1159]
rawout <- as.matrix(read.csv(file = paste("output/ff=", fitnessFunction,
"_seed=", seed,
"_a=", a,
"_s=", s,
"_r=", r,
"_b=", b,
"_mu=", mu,
"_std=", std,
".csv", sep = "")))[,-1159]
results <- vector(length = 2)
for(i in 0:1){
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
for(pop in 1:10){
popdat <- rawout[which(rawout[,2] == pop),]
if(i == 0){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= 0.01)
}else if(i == 1){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= 0.01)
}
}
jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
results[i + 1] <- c(mean(jaccmat))
}
system(paste("rm ./output/directional",
"_seed=", seed,
"_s=", s,
"_r=", r,
"_a=", a,
"_b=", b, ".csv", sep = ''))
list.files()
##############
## Observed ##
##############
rawout <- readRDS("hap_blocks.jaccard.neutral999.RDS")
observed <- vector(length = 2)
# for(i in 0:1){
#   observed[(5 * i + 1):(5 * i + 5)] <- quantile(rawout[[i+1]])
# }
observed[1] <- mean(rawout[[1]])
observed[2] <- mean(rawout[[2]])
rm(rawout) # , i)
library(data.table)
library(ggraptR)
setwd("~/Documents/GitHub/EpistasisSim/nlocisnps")
list.files
list.files()
empjaccs <- readRDS(file = 'hap_block_snps.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
empjaccs <- readRDS(file = 'hap_block_snps.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix
jaccmatrix[1:5,1:5]
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c(jaccmatrix[1,], rep('Emperical', times = 2))
generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 4977,4977)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac <- c(colMeans(meanjac), empjaccs)
?colMeans
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- jaccmatrix[4:103,]
meanjac[1:5,1:5]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac[1:5,1:5]
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac[1:5,1:5]
sum(is.na(meanjac))
meanjac <- c(colMeans(meanjac), empjaccs)
meanjac
meanjac <- c(colMeans(meanjac, na.rm = T), empjaccs)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac <- c(colMeans(meanjac, na.rm = T), empjaccs)
meanjac
data = data.frame(fitfun, generation, nloci, meanjac)
ggplot(data, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_grey() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=15,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="generation")) +
xlab("Numer of loci") +
ylab("Mean Jaccard Score")
library(data.table)
library(ggraptR)
setwd("~/Documents/GitHub/EpistasisSim/nlocisnps")
empjaccs <- readRDS(file = 'hap_block_snps.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c(jaccmatrix[1,], rep('empirical', times = 2))
generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 4977,4977)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac <- c(colMeans(meanjac, na.rm = T), empjaccs)
data = data.frame(fitfun, generation, nloci, meanjac)
ggplot(data, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_grey() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=15,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="generation")) +
xlab("Numer of loci") +
ylab("Mean Jaccard Score")
# ggraptR(data)
library(data.table)
library(ggraptR)
setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c(jaccmatrix[1,], rep('Emperical', times = 2))
generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac <- c(colMeans(meanjac), empjaccs)
data = data.frame(fitfun, generation, nloci, meanjac)
ggplot(data, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_grey() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=15,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="generation")) +
xlab("Numer of loci") +
ylab("Mean Jaccard Score")
# ggraptR(data)
library(data.table)
library(ggraptR)
setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c(jaccmatrix[1,], rep('Emperical', times = 2))
generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac <- c(colMeans(meanjac), empjaccs)
data = data.frame(fitfun, generation, nloci, meanjac)
ggplot(data, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_grey() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=15,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="generation")) +
xlab("Numer of loci") +
ylab("Mean Jaccard Score")
# ggraptR(data)
library(doMC)
library(stringr)
library(foreach)
library(EasyABC)
setwd("~/Documents/GitHub/EpistasisSim/ABC")
# opts <- list(preschedule = FALSE)
# registerDoMC(5)
#################
## ABC wrapper ##
#################
## test params ##
#################
seed = 1
npops = 10
nloci = 121
popsize = 1750
scaleT0 = 0
scales = 0
fitnessFunction = 1
fmin = 0
fmax = 1
s = 1
r = 1
a = 8
b = 1
mu = 1
std = 1
par <- c(seed, npops, nloci, popsize, scaleT0, scales,
fitnessFunction, fmin, fmax, s, r, a, b, mu, std)
rm(list=ls()[-9])
seed <- par[1]
npops <- par[2]
nloci <- par[3]
popsize <- par[4]
scaleT0 <- par[5]
scales <- par[6]
fitnessFunction <- par[7]
fmin <- par[8]
fmax <- par[9]
s <- par[10]
r <- par[11]
a <- par[12]
b <- par[13] * 100
mu <- par[14]
std <- par[15]
system(paste("slim -d fmin=", fmin,
" -d fmax=", fmax,
" -d npops=", npops,
" -d nloci=", nloci,
" -d popsize=", popsize,
" -d scaleT0=", scaleT0,
" -d scales=0", scales,
" -d seed=", seed,
" -d fitnessFunction=", fitnessFunction,
" -d a=", a,
" -d s=", s,
" -d r=", r,
" -d b=", b,
" -d mu=", mu,
" -d std=", std,
" New.slim | tail -n +14 > output/ff=", fitnessFunction,
"_seed=", seed,
"_a=", a,
"_s=", s,
"_r=", r,
"_b=", b,
"_mu=", mu,
"_std=", std,
".csv", sep = ""))
rawout <- as.matrix(read.csv(file = paste("output/ff=", fitnessFunction,
"_seed=", seed,
"_a=", a,
"_s=", s,
"_r=", r,
"_b=", b,
"_mu=", mu,
"_std=", std,
".csv", sep = "")))
rawout
as.matrix(read.csv(file = paste("output/ff=", fitnessFunction,
"_seed=", seed,
"_a=", a,
"_s=", s,
"_r=", r,
"_b=", b,
"_mu=", mu,
"_std=", std,
".csv", sep = "")))[,-1159]
rawout <- as.matrix(read.csv(file = paste("output/ff=", fitnessFunction,
"_seed=", seed,
"_a=", a,
"_s=", s,
"_r=", r,
"_b=", b,
"_mu=", mu,
"_std=", std,
".csv", sep = "")))
rawout <- rawout[-ncol(rawout)]
rawout
