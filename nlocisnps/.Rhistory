jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
if(length(union(signsnps[[j]], signsnps[[k]])) == 0) jaccmat[j,k] <- 0
# cat("Intersect: ", length(intersect(signsnps[[j]], signsnps[[k]])))
# cat("    Union: ", length(union(signsnps[[j]], signsnps[[k]])), "\n")
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
if(gen == 1) results[,1] <- mean(jaccmat)
if(gen == 2) results[,2] <- mean(jaccmat)
}
return(results)
}
GetCutoffs <- function(rawout){
loci <- colnames(rawout)[3:ncol(rawout)]
loci <- substr(loci,5, nchar(loci))
loci <- as.numeric(loci) + 1
cutoffs <- empdata$Gen10_neutAFC999[loci]
names(cutoffs) <- loci
return(cutoffs)
}
library(data.table)
library(doMC)
library(stringr)
library(foreach)
library(ggraptR)
opts <- list(preschedule = FALSE)
registerDoMC(7)
setwd("~/Documents/GitHub/EpistasisSim/nlocihb/")
# setwd("~/Documents/GitHub/EpistasisSim/nlocihb/")
empdata <- fread(file = "sortedhbdata.csv")
setwd("/Volumes/T7/EpistasisSim/nlocihb")
# setwd("/media/nathan/T7/EpistasisSim/nlocihb/")
# setwd("/Volumes/T7/EpistasisSim/nlocihb")
FFs <- list.files(path = './SLiMouts/')
sim.results <- array(dim = c(103, 2 * length(FFs) * 13))
sim.results[1,] <- rep(c("positive",
"negative", # 1
"multiplicative", # 2
"directional", # 3
"diminishingReturns", # 4
"stabilizing"), # 5
each = 2, times = 13)
sim.results[2,] <- rep(c(6,10), each = 1, times = 6*13)
sim.results[3,] <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 12, times = 1)
ff = FFs[1]
files <- list.files(path = paste("./SLiMouts/", ff, "/", sep = ''))
splt <- do.call(rbind, strsplit(files, "_"))
nloci = 20
nlocisims <- which(splt[,9] == paste("nloci=", nloci, sep = ""))
files[nlocisims]
paste("./SLiMouts/", ff, "/", sim, sep = '')
sim = files[nlocisims]
sim = sim[1]
path <- paste("./SLiMouts/", ff, "/", sim, sep = '')
rawout <- read.csv(file = path)
rawout <- rawout[,-ncol(rawout)]
cutoffs <- GetCutoffs(rawout = rawout)
meanjaccs <- foreach(sim = files[nlocisims], .options.multicore=opts, .combine = 'rbind') %dopar%{
path <- paste("./SLiMouts/", ff, "/", sim, sep = '')
rawout <- read.csv(file = path)
rawout <- rawout[,-ncol(rawout)]
cutoffs <- GetCutoffs(rawout = rawout)
return(GetJaccards(rawout = rawout, cutoffs = cutoffs))
}
meanjaccs
str(meanjaccs)
which(sim.results[1,] == ff)
str(sim.results)
which(sim.results[3,] == nloci)
which(sim.results[1,] == ff & sim.results[3,] == nloci)
sim.results[1:5,1:5]
setwd("~/Documents/GitHub/EpistasisSim/hb0.5/")
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/snps0.5")
mult <- 6
iter = 1000
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1000)
a <- rep(c(8,-8,0, 0, 40, 0), each = 1000)
s <- rep(c(0,0,0,0.1,0,0), each = 1000)
r <- rep(c(0,0,0,-75,0,0), each = 1000)
b <- rep(c(0,0,0,-0.41,-0.395,0), each = 1000)
mu <- rep(c(0,0,0,0,0,0.435), each = 1000)
std <- rep(c(0,0,0,0,0,0.0175), each = 1000)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
dat <- dat[1:10,]
dat
fwrite(dat, file = 'params.txt', col.names = F)
setwd("/media/nathan/T7/EpistasisSim/snpsT0.5")
setwd("/Volumes/T7/EpistasisSim/snpsT0.5")
filenames <- list.files(path = './SLiMouts/')
filenames <- list.files(path = './SLiMouts/')
parsefilenames(filenames = filenames)
########################
## Internal Functions ##
########################
parsefilenames <- function(filenames){
FFs <- c("positive",
"negative", # 1
"multiplicative", # 2
"directional", # 3
"diminishingReturns", # 4
"stabilizing") # 5
for(ff in FFs){
system(paste("mkdir ./SLiMOuts/", ff, sep = ""))
}
for(i in 1:length(filenames)){
split <- strsplit(filenames[i], "_")[[1]]
split[length(split)] <- substr(split[length(split)], 1, nchar(split[length(split)]) - 4)
if(split[1] == "ff=1" & split[3] == "a=-8") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/negative/", sep = ""))
if(split[1] == "ff=1" & split[3] == "a=8") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/positive/", sep = ""))
if(split[1] == "ff=2") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/multiplicative/", sep = ""))
if(split[1] == "ff=3") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/directional/", sep = ""))
if(split[1] == "ff=4") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/diminishingReturns/", sep = ""))
if(split[1] == "ff=5") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/stabilizing/", sep = ""))
}
}
parsefilenames(filenames = filenames)
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/snps0.5")
mult <- 6
iter = 1000
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1000)
a <- rep(c(8,-8,0, 0, 40, 0), each = 1000)
s <- rep(c(0,0,0,0.1,0,0), each = 1000)
r <- rep(c(0,0,0,-75,0,0), each = 1000)
b <- rep(c(0,0,0,-0.41,-0.395,0), each = 1000)
mu <- rep(c(0,0,0,0,0,0.435), each = 1000)
std <- rep(c(0,0,0,0,0,0.0175), each = 1000)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
dat <- dat[which(dat[,2])]
dat[,2]
dat <- dat[which(dat[,2] == 1 | dat[,2] == 2)]
head(dat)
str(dat)
dim(dat)
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/snps0.5")
mult <- 6
iter = 1000
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1000)
a <- rep(c(8,-8,0, 0, 40, 0), each = 1000)
s <- rep(c(0,0,0,0.1,0,0), each = 1000)
r <- rep(c(0,0,0,-75,0,0), each = 1000)
b <- rep(c(0,0,0,-0.41,-0.395,0), each = 1000)
mu <- rep(c(0,0,0,0,0,0.435), each = 1000)
std <- rep(c(0,0,0,0,0,0.0175), each = 1000)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
> dat <- dat[which(dat[,2] == 1 | dat[,2] == 2),]
dat <- dat[which(dat[,2] == 1 | dat[,2] == 2),]
head(dat)
fwrite(dat, file = 'params.txt', col.names = F)
library(data.table)
library(ggraptR)
library(gridExtra)
setwd("~/Documents/GitHub/EpistasisSim/nlociAlphahb")
setwd("~/Documents/GitHub/EpistasisSim/nlociAlphahb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
jaccmatrix[1:5,1:5]
unique(jaccmatrix[1,])
library(data.table)
library(ggraptR)
library(gridExtra)
library(data.table)
library(ggraptR)
library(gridExtra)
setwd("~/Documents/GitHub/EpistasisSim/nlociAlphahb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "alpha=8") fitfun <- c(fitfun, "F. alpha=8")
if(jaccmatrix[1,c] == "alpha=-8") fitfun <- c(fitfun, "B. alpha=-8")
if(jaccmatrix[1,c] == "alpha=1") fitfun <- c(fitfun, "E. alpha=1")
if(jaccmatrix[1,c] == "alpha=-1") fitfun <- c(fitfun, "C. alpha=-1")
if(jaccmatrix[1,c] == "alpha=15") fitfun <- c(fitfun, "G. alpha=15")
if(jaccmatrix[1,c] == "alpha=-15") fitfun <- c(fitfun, "A. alpha=-15")
if(jaccmatrix[1,c] == "alpha=0") fitfun <- c(fitfun, "D. alpha=0")
}
fitfun <- c(fitfun, rep('H. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 182)
meanjac <- c(colMeans(meanjac), empjaccs)
data <- data.frame(fitfun, Generation, nloci, meanjac)
dev.off()
ggplot(data, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(Generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="Generation")) +
guides(colour=guide_legend(title="Fitness Function")) +
xlab("Number of loci") +
ylab("Mean Jaccard Score") +
scale_color_viridis(discrete = T, option = "turbo") +
scale_fill_viridis(discrete = T, option = "turbo")
library(viridis)
ggplot(data, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(Generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="Generation")) +
guides(colour=guide_legend(title="Fitness Function")) +
xlab("Number of loci") +
ylab("Mean Jaccard Score") +
scale_color_viridis(discrete = T, option = "turbo") +
scale_fill_viridis(discrete = T, option = "turbo")
data <- data[-which(data$fitfun == "A. alpha=-15")]
dev.off()
ggplot(data, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(Generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="Generation")) +
guides(colour=guide_legend(title="Fitness Function")) +
xlab("Number of loci") +
ylab("Mean Jaccard Score") +
scale_color_viridis(discrete = T, option = "turbo") +
scale_fill_viridis(discrete = T, option = "turbo")
library(data.table)
library(ggraptR)
library(gridExtra)
library(viridis)
setwd("~/Documents/GitHub/EpistasisSim/nlociAlphahb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "alpha=8") fitfun <- c(fitfun, "E. alpha=8")
if(jaccmatrix[1,c] == "alpha=-8") fitfun <- c(fitfun, "A. alpha=-8")
if(jaccmatrix[1,c] == "alpha=1") fitfun <- c(fitfun, "D. alpha=1")
if(jaccmatrix[1,c] == "alpha=-1") fitfun <- c(fitfun, "B. alpha=-1")
if(jaccmatrix[1,c] == "alpha=15") fitfun <- c(fitfun, "F. alpha=15")
if(jaccmatrix[1,c] == "alpha=-15") fitfun <- c(fitfun, "A. alpha=-15")
if(jaccmatrix[1,c] == "alpha=0") fitfun <- c(fitfun, "C. alpha=0")
}
fitfun <- c(fitfun, rep('G. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 182)
meanjac <- c(colMeans(meanjac), empjaccs)
data <- data.frame(fitfun, Generation, nloci, meanjac)
data <- data[-which(data$fitfun == "A. alpha=-15")]
data$fitfun
unique(data$fitfun)
which(data$fitfun == "A. alpha=-15")
data <- data.frame(fitfun, Generation, nloci, meanjac)
data <- data[-which(data$fitfun == "A. alpha=-15"),]
dev.off()
ggplot(data, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(Generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="Generation")) +
guides(colour=guide_legend(title="Fitness Function")) +
xlab("Number of loci") +
ylab("Mean Jaccard Score") +
scale_color_viridis(discrete = T, option = "turbo") +
scale_fill_viridis(discrete = T, option = "turbo")
#######
setwd("~/Documents/GitHub/EpistasisSim/EmpT0hb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
treatment <- c(rep(c("B. Positive Epistasis",
"C. Negative Epistasis",
"A. Multiplicative",
"D. Directional QT",
"E. Truncating QT",
"F. Stabilizing QT"), each = 2000),
rep("E. Empirical", each = 2))
generation <- c(rep(c(6,10), each = 1000, times = 6),
c(6,10))
jaccards <- c()
for(i in 1:12){
jaccards <- c(jaccards, jaccmatrix[3:1002,i])
}
jaccards <- as.numeric(c(jaccards, empjaccs))
data <- data.frame(treatment, generation, jaccards)
data <- data[-which(data$treatment == "E. Truncating QT" |
data$treatment == "F. Stabilizing QT"),]
# ggraptR(data)
ggplot(data, aes(y=jaccards, x=as.factor(treatment))) +
geom_boxplot(aes(fill=as.factor(generation)), stat="boxplot", position="dodge", alpha=0.5, width=0.3) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000", size=20, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="Generation")) + # ggtitle("121 Hap Blocks. Empirical T0") +
xlab("Fitness Function") +
ylab("Jaccard Score") +
ylim(c(0,1)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_color_viridis(discrete = T) +
scale_fill_viridis(discrete = T)
#################################
########
setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "positive") fitfun <- c(fitfun, "B. Positive Epistasis")
if(jaccmatrix[1,c] == "negative") fitfun <- c(fitfun, "C. Negative Epistasis")
if(jaccmatrix[1,c] == "multiplicative") fitfun <- c(fitfun, "A. Multiplicative")
if(jaccmatrix[1,c] == "directional") fitfun <- c(fitfun, "D. Directional QT")
if(jaccmatrix[1,c] == "diminishingReturns") fitfun <- c(fitfun, "E. Truncating QT")
if(jaccmatrix[1,c] == "stabilizing") fitfun <- c(fitfun, "F. Stabilizing QT")
}
fitfun <- c(fitfun, rep('G. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac <- c(colMeans(meanjac), empjaccs)
data = data.frame(fitfun, Generation, nloci, meanjac)
plot1 <- ggplot(data, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(Generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=F) +
guides(colour=F) +
ylab("Mean Jaccard Score") +
xlab("Number of Loci") +
ylim(c(0,1)) +
ggtitle("121 Haplotype Blocks") +
# scale_color_brewer(palette = "Pastel1")
scale_color_viridis(discrete = T, option = "turbo") +
scale_fill_viridis(discrete = T, option = "turbo")
#################################
setwd("~/Documents/GitHub/EpistasisSim/nlocisnps")
empjaccs <- readRDS(file = 'hap_block_snps.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "positive") fitfun <- c(fitfun, "B. Positive Epistasis")
if(jaccmatrix[1,c] == "negative") fitfun <- c(fitfun, "C. Negative Epistasis")
if(jaccmatrix[1,c] == "multiplicative") fitfun <- c(fitfun, "A. Multiplicative")
if(jaccmatrix[1,c] == "directional") fitfun <- c(fitfun, "D. Directional QT")
if(jaccmatrix[1,c] == "diminishingReturns") fitfun <- c(fitfun, "E. Truncating QT")
if(jaccmatrix[1,c] == "stabilizing") fitfun <- c(fitfun, "F. Stabilizing QT")
}
fitfun <- c(fitfun, rep('G. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 4977,4977)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac <- c(colMeans(meanjac, na.rm = T), empjaccs)
data = data.frame(fitfun, Generation, nloci, meanjac)
plot2 <- ggplot(data, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(Generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="Generation")) +
guides(colour = guide_legend(title = "Fitness Function")) +
xlab("Number of Loci") +
theme(axis.text.y.left = element_blank()) +
ylab("") +
ylim(c(0,1)) +
ggtitle("4977 SNPs on 121 Haplotype Blocks") +
# scale_color_brewer(palette = "RdYlBu")
scale_color_viridis(discrete = T, option = "turbo") +
scale_fill_viridis(discrete = T, option = "turbo")
#################################
grid.arrange(plot1, plot2, ncol=2, widths = c(1,1.35))
####################################
