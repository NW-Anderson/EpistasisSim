function (void)MakeOutput(void) {
	results = sim.getValue("results");
	catn(c("Gen,", "Pop,", "Loci" + 1:nloci + ","));
	for(i in 0:(nrow(results)-1)) {
		catn(paste(results[i,], sep = ", "));	
	}
}

////////////////////////////

function (void)InitializeFreqArray(void) {
	results = array(rep(0.0, (3*npops)*(nloci + 2)),dim = c(3*npops, nloci + 2));
	gencol = c(rep(0, npops), rep(6, npops), rep(10, npops));
	popcol = rep(1:npops, 3);
	results[,0] = gencol;
	results[,1] = popcol;
	sim.setValue("results", results);
}

////////////////////////////

function (void)SaveVals(void) {
	results = sim.getValue("results");
	gen = sim.generation;
	if(gen == 1) mult = 0;
	if(gen == 7) mult = 1;
	if(gen == 11) mult = 2;
	genomesperpop = length(sim.subpopulations[0].genomes);
	
	for(pop in 0:(npops-1)) {
		mutations = sim.subpopulations[pop].genomes.mutations;		
		for(pos in 0:(nloci-1)) {
			results[(mult * npops + pop),(pos + 2)] = sum(mutations.position == pos) / genomesperpop;
		}
	}
	
	sim.setValue("results", results);
}


////////////////////////////

function (void)SetUpStartingPops(void) {
	startfreq = sim.getValue("startfreq");
	selcoef = sim.getValue("selcoef");
	
	genomes = sim.subpopulations.genomes;
	for(pos in 0:(nloci-1)){
		genomes[which(rbinom(length(genomes),1,startfreq[pos])==1)].addNewMutation(m1,selcoef[pos],pos);
	}
}


////////////////////////////

function (void)ReadLog(void) {
	lines = readFile("/media/lee/HDD_Array/nwanderson/EpistasisSim/selected_snps.info.txt");
//	lines = readFile("~/Documents/GitHub/EpistasisSim/selected_snps.info.txt");
	lines = lines[substr(lines, 0, 1) != "//"];
	selcoef = c();
	startfreq = c();
	for (line in lines[1:(length(lines) - 1)]){
		fields = strsplit(line, ",");
		selcoef = c(selcoef, asFloat(fields[2]));
		startfreq = c(startfreq, asFloat(fields[3]));
	}
	sim.setValue("selcoef", selcoef);
	sim.setValue("startfreq", startfreq);
}


////////////////////////////

function (void)GetFits(void) {
	inds = sim.subpopulations.individuals;
	polygenicscore = inds.sumOfMutationsOfType(m1);
	
	if(fitnessFunction == "directional") {
		inds.fitnessScaling = fmin + ((fmax - fmin) / ((1 + s * exp(r *	(polygenicscore + b))) ^(1/s)));
	}
	
	if(fitnessFunction == "diminishing returns") {
		inds.fitnessScaling = fmin + (fmax - fmin) * (1 - 1 / exp(a * (polygenicscore + b)));
	}
}

////////////////////////////

initialize() {
	setSeed(seed);
//	defineGlobal("npops",10);
//	defineGlobal("nloci", 1156);
//	defineGlobal("RR", 0.5);
//	defineGlobal("popsize", 2000);
//	defineGlobal("fitnessFunction", "directional");
//	defineGlobal("fmin",0);
//	defineGlobal("fmax",1);
//	defineGlobal("s",1.0);
//	defineGlobal("r",-0.05);
//	defineGlobal("a",0.2);
//	defineGlobal("b", -130);

	initializeMutationRate(0);
	
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	initializeGenomicElementType("g1", m1, 1.0);
	
	initializeGenomicElement(g1, 0, (nloci - 1));
	initializeRecombinationRate(RR);
}




fitness(m1) { 
	return 1.0;
}




1 late() {
	sim.addSubpop("p1", popsize);
	sim.addSubpop("p2", popsize);
	sim.addSubpop("p3", popsize);
	sim.addSubpop("p4", popsize);
	sim.addSubpop("p5", popsize);
	sim.addSubpop("p6", popsize);
	sim.addSubpop("p7", popsize);
	sim.addSubpop("p8", popsize);
	sim.addSubpop("p9", popsize);
	sim.addSubpop("p10", popsize);
	
	ReadLog();
	SetUpStartingPops();
	InitializeFreqArray();
}



1: late() {
	GetFits();
}



1 late() {
	SaveVals();
}

7 late() {
	SaveVals();
}

11 late() {
	SaveVals();
	MakeOutput();
}