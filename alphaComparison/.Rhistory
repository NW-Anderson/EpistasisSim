theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="Generation")) +
guides(colour=guide_legend(title="Fitness Function")) +
xlab("Number of loci") +
ylab("Mean Jaccard Score") +
scale_color_viridis(discrete = T, option = "turbo") +
scale_fill_viridis(discrete = T, option = "turbo")
###################################
###
totaldata <- array()
setwd("~/Documents/GitHub/EpistasisSim/nlociAlphahb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "alpha=8") fitfun <- c(fitfun, "E. alpha=8")
if(jaccmatrix[1,c] == "alpha=-8") fitfun <- c(fitfun, "B. alpha=-8")
if(jaccmatrix[1,c] == "alpha=1") fitfun <- c(fitfun, "D. alpha=1")
if(jaccmatrix[1,c] == "alpha=-1") fitfun <- c(fitfun, "B. alpha=-1")
if(jaccmatrix[1,c] == "alpha=36.5629892630851") fitfun <- c(fitfun, "C. alpha=36.5")
if(jaccmatrix[1,c] == "alpha=-36.5629892630851") fitfun <- c(fitfun, "A. alpha=-36.5")
if(jaccmatrix[1,c] == "alpha=0") fitfun <- c(fitfun, "B. alpha=0\n    (Multiplicative)")
}
fitfun <- c(fitfun, rep('E. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 182)
meanjac <- c(colMeans(meanjac), empjaccs)
data <- data.frame(fitfun, Generation, nloci, meanjac)
data <- data[-which(data$fitfun == "B. alpha=-8" | data$fitfun == "E. alpha=8" |
data$fitfun == "D. alpha=1" | data$fitfun == "B. alpha=-1"),]
totaldata <- rbind(totaldata, data)
setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "positive") fitfun <- c(fitfun, "B. Positive Epistasis")
if(jaccmatrix[1,c] == "negative") fitfun <- c(fitfun, "C. Negative Epistasis")
if(jaccmatrix[1,c] == "multiplicative") fitfun <- c(fitfun, "A. Multiplicative")
if(jaccmatrix[1,c] == "directional") fitfun <- c(fitfun, "D. Directional QT")
if(jaccmatrix[1,c] == "diminishingReturns") fitfun <- c(fitfun, "E. Truncating QT")
if(jaccmatrix[1,c] == "stabilizing") fitfun <- c(fitfun, "F. Stabilizing QT")
}
fitfun <- c(fitfun, rep('G. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac <- c(colMeans(meanjac), empjaccs)
data = data.frame(fitfun, Generation, nloci, meanjac)
data = data[which(data$fitfun == "D. Directional QT"),]
totaldata <- rbind(totaldata, data)
totaldata <- totaldata[-1,]
ggplot(totaldata, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(Generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="Generation")) +
guides(colour=guide_legend(title="Fitness Function")) +
xlab("Number of loci") +
ylab("Mean Jaccard Score") +
scale_color_viridis(discrete = T, option = "turbo") +
scale_fill_viridis(discrete = T, option = "turbo")
###################################
###
setwd("~/Documents/GitHub/EpistasisSim/alphaComparison")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
treatment <- c(rep(c("B. alpha=8",
"C. alpha=-8",
"D. alpha=36.5",
"A. alpha=0"), each = 2000),
rep("E. Empirical", each = 2))
generation <- c(rep(c(6,10), each = 1000, times = 4),
c(6,10))
jaccards <- c()
for(i in 1:8){
jaccards <- c(jaccards, jaccmatrix[3:1002,i])
}
jaccards <- as.numeric(c(jaccards, empjaccs))
data <- data.frame(treatment, generation, jaccards)
# data <- data[-which(data$treatment == "E. Truncating QT" |
#                       data$treatment == "F. Stabilizing QT"),]
# ggraptR(data)
ggplot(data, aes(y=jaccards, x=as.factor(treatment))) +
geom_boxplot(aes(fill=as.factor(generation)), stat="boxplot", position="dodge", alpha=0.5, width=0.3) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000", size=20, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="Generation")) + # ggtitle("121 Hap Blocks. Empirical T0") +
xlab("Fitness Function") +
ylab("Jaccard Score") +
ylim(c(0,1)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_color_viridis(discrete = T) +
scale_fill_viridis(discrete = T)
###
setwd("~/Documents/GitHub/EpistasisSim/alphaComparison")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
treatment <- c(rep(c("B. alpha=8",
"C. alpha=-8",
"D. alpha=36.5",
"A. alpha=0\n    (Multiplicative)"), each = 2000),
rep("E. Empirical", each = 2))
generation <- c(rep(c(6,10), each = 1000, times = 4),
c(6,10))
jaccards <- c()
for(i in 1:8){
jaccards <- c(jaccards, jaccmatrix[3:1002,i])
}
jaccards <- as.numeric(c(jaccards, empjaccs))
data <- data.frame(treatment, generation, jaccards)
# data <- data[-which(data$treatment == "E. Truncating QT" |
#                       data$treatment == "F. Stabilizing QT"),]
# ggraptR(data)
ggplot(data, aes(y=jaccards, x=as.factor(treatment))) +
geom_boxplot(aes(fill=as.factor(generation)), stat="boxplot", position="dodge", alpha=0.5, width=0.3) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000", size=20, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="Generation")) + # ggtitle("121 Hap Blocks. Empirical T0") +
xlab("Fitness Function") +
ylab("Jaccard Score") +
ylim(c(0,1)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_color_viridis(discrete = T) +
scale_fill_viridis(discrete = T)
################################
#
setwd("~/Documents/GitHub/EpistasisSim/nlociAlphahb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "alpha=8") fitfun <- c(fitfun, "E. alpha=8")
if(jaccmatrix[1,c] == "alpha=-8") fitfun <- c(fitfun, "B. alpha=-8")
if(jaccmatrix[1,c] == "alpha=1") fitfun <- c(fitfun, "D. alpha=1")
if(jaccmatrix[1,c] == "alpha=-1") fitfun <- c(fitfun, "B. alpha=-1")
if(jaccmatrix[1,c] == "alpha=36.5629892630851") fitfun <- c(fitfun, "F. alpha=36.5")
if(jaccmatrix[1,c] == "alpha=-36.5629892630851") fitfun <- c(fitfun, "A. alpha=-36.5")
if(jaccmatrix[1,c] == "alpha=0") fitfun <- c(fitfun, "C. alpha=0")
}
fitfun <- c(fitfun, rep('G. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 182)
meanjac <- c(colMeans(meanjac), empjaccs)
data <- data.frame(fitfun, Generation, nloci, meanjac)
data <- data[-which(data$fitfun == "B. alpha=-8"),]
ggplot(data, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(Generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="Generation")) +
guides(colour=guide_legend(title="Fitness Function")) +
xlab("Number of loci") +
ylab("Mean Jaccard Score") +
scale_color_viridis(discrete = T, option = "turbo") +
scale_fill_viridis(discrete = T, option = "turbo")
#################################
#
totaldata <- array()
setwd("~/Documents/GitHub/EpistasisSim/nlociAlphahb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "alpha=8") fitfun <- c(fitfun, "E. alpha=8")
if(jaccmatrix[1,c] == "alpha=-8") fitfun <- c(fitfun, "B. alpha=-8")
if(jaccmatrix[1,c] == "alpha=1") fitfun <- c(fitfun, "D. alpha=1")
if(jaccmatrix[1,c] == "alpha=-1") fitfun <- c(fitfun, "B. alpha=-1")
if(jaccmatrix[1,c] == "alpha=36.5629892630851") fitfun <- c(fitfun, "C. alpha=36.5")
if(jaccmatrix[1,c] == "alpha=-36.5629892630851") fitfun <- c(fitfun, "A. alpha=-36.5")
if(jaccmatrix[1,c] == "alpha=0") fitfun <- c(fitfun, "B. alpha=0\n    (Multiplicative)")
}
fitfun <- c(fitfun, rep('E. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 182)
meanjac <- c(colMeans(meanjac), empjaccs)
data <- data.frame(fitfun, Generation, nloci, meanjac)
data <- data[-which(data$fitfun == "B. alpha=-8" | data$fitfun == "E. alpha=8" |
data$fitfun == "D. alpha=1" | data$fitfun == "B. alpha=-1"),]
totaldata <- rbind(totaldata, data)
setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "positive") fitfun <- c(fitfun, "B. Positive Epistasis")
if(jaccmatrix[1,c] == "negative") fitfun <- c(fitfun, "C. Negative Epistasis")
if(jaccmatrix[1,c] == "multiplicative") fitfun <- c(fitfun, "A. Multiplicative")
if(jaccmatrix[1,c] == "directional") fitfun <- c(fitfun, "D. Directional QT")
if(jaccmatrix[1,c] == "diminishingReturns") fitfun <- c(fitfun, "E. Truncating QT")
if(jaccmatrix[1,c] == "stabilizing") fitfun <- c(fitfun, "F. Stabilizing QT")
}
fitfun <- c(fitfun, rep('G. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac <- c(colMeans(meanjac), empjaccs)
data = data.frame(fitfun, Generation, nloci, meanjac)
data = data[which(data$fitfun == "D. Directional QT"),]
totaldata <- rbind(totaldata, data)
totaldata <- totaldata[-1,]
ggplot(totaldata, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(Generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="Generation")) +
guides(colour=guide_legend(title="Fitness Function")) +
xlab("Number of loci") +
ylab("Mean Jaccard Score") +
scale_color_viridis(discrete = T, option = "turbo") +
scale_fill_viridis(discrete = T, option = "turbo")
###################################
##################################
setwd("~/Documents/GitHub/EpistasisSim/alphaComparison")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
treatment <- c(rep(c("B. alpha=8",
"C. alpha=-8",
"D. alpha=36.5",
"A. alpha=0\n    (Multiplicative)"), each = 2000),
rep("E. Empirical", each = 2))
generation <- c(rep(c(6,10), each = 1000, times = 4),
c(6,10))
jaccards <- c()
for(i in 1:8){
jaccards <- c(jaccards, jaccmatrix[3:1002,i])
}
jaccards <- as.numeric(c(jaccards, empjaccs))
data <- data.frame(treatment, generation, jaccards)
# data <- data[-which(data$treatment == "E. Truncating QT" |
#                       data$treatment == "F. Stabilizing QT"),]
# ggraptR(data)
ggplot(data, aes(y=jaccards, x=as.factor(treatment))) +
geom_boxplot(aes(fill=as.factor(generation)), stat="boxplot", position="dodge", alpha=0.5, width=0.3) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000", size=20, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="Generation")) + # ggtitle("121 Hap Blocks. Empirical T0") +
xlab("Fitness Function") +
ylab("Jaccard Score") +
ylim(c(0,1)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_color_viridis(discrete = T) +
scale_fill_viridis(discrete = T)
exp(8/100)
exp(8 * 19 / 100)
################
## Question 3 ##
################
getFreq <- function(na, nb, nab, no, numit, pa, pb, po){
N <- na + nb + nab + no
freq <- array(0,c(numit,3))
freq[1,1] <- pa
freq[1,2] <- pb
freq[1,3] <- po
for (i in 2:numit) {
naa<-na*pa^2/(pa^2+2*pa*po)
nao<-2*pa*po*na/(pa^2+2*pa*po)
nbb<-nb*pb^2/(pb^2+2*pb*po)
nbo<-2*pb*po*nb/(pb^2+2*pb*po)
pa<-(2*naa+nao+nab)/(2*N)
pb<-(2*nbb+nbo+nab)/(2*N)
po<-(2*no+nao+nbo)/(2*N)
freq[i,1] <- pa
freq[i,2] <- pb
freq[i,3] <- po
}
return(freq)
}
## starting place 1
na <- 186
nb <- 38
nab <- 13
no <- 284
# starting values for pA, pB and pO
pa<-0.3
pb<-0.2
po<-0.5
numit <- 20 # number of iterations
freq1 <- getFreq(na, nb, nab, no, numit, pa, pb, po)
freq1
## starting place 2
na <- 186
nb <- 38
nab <- 13
no <- 284
# starting values for pA, pB and pO
pa<-0.005
pb<-0.99
po<-0.005
numit <- 20 # number of iterations
freq2 <- getFreq(na, nb, nab, no, numit, pa, pb, po)
freq2
## starting place 3
na <- 186
nb <- 38
nab <- 13
no <- 284
# starting values for pA, pB and pO
pa<-0.999
pb<-0.0005
po<-0.0005
numit <- 20 # number of iterations
freq3 <- getFreq(na, nb, nab, no, numit, pa, pb, po)
freq3
plot (freq1[,1], type="l", ylab = "Frequency of allele A",
xlab = "Iteration", ylim = c(0,1))
lines(freq2[,1], col = "red")
lines(freq3[,1], col = "blue")
plot (freq1[,2], type="l", ylab = "Frequency of allele B",
xlab = "Iteration", ylim = c(0,1))
lines(freq2[,2], col = "red")
lines(freq3[,2], col = "blue")
plot (freq1[,3], type="l", ylab = "Frequency of allele O",
xlab = "Iteration", ylim = c(0,1))
lines(freq2[,3], col = "red")
lines(freq3[,3], col = "blue")
p0 <- 0.9
wAA <- wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
################
## Question 4 ##
################
getNextGenFreq <- function(p, wAA, wAa, waa){
q <- 1 - p
wbar <- p ^2 * wAA + 2 * p * q * wAa + q ^ 2 * waa
pprime <- (p^2 * wAA + p * q * wAa) / wbar
return(pprime)
}
p0 <- 0.9
wAA <- wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
wAA <- 2
wAa <- 1.5
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
wAA <- 1
wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
p0 <- 0.5
wAA <- wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
wAA <- 2
wAa <- 1.5
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
wAA <- 1
wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
p0 <- 0.1
wAA <- wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
wAA <- 2
wAa <- 1.5
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
wAA <- 1
wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
