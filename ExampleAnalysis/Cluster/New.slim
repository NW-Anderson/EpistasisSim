// this function will call the results matrix that we have been building. give it column names and prints it to the console in csv format.
function (void)MakeOutput(void) {
	results = sim.getValue("results");
	sampledloci = sim.getValue("sampledloci");
	catn(c("Gen,", "Pop,", "Loci" + sampledloci + ","));
	for(i in 0:(nrow(results)-1)) {
		catn(paste(results[i,], sep = ", "));
	}
}

////////////////////////////
// this function creates the empty matrix we will fill in with allele frequencies at generation 6 and 10. It will be of the format
// Gen, Pop, LociX, LociY.......
// 0	, 1  , 0.1	, 0.23 ..... 	
// 0  , 2.......
// .    .
// .    .   
function (void)InitializeFreqArray(void) {
	results = array(rep(0.0, (3*npops)*(nloci + 2)),dim = c(3*npops, nloci + 2));
	gencol = c(rep(0, npops), rep(6, npops), rep(10, npops));
	popcol = rep(1:npops, 3);
	results[,0] = gencol;
	results[,1] = popcol;
	sim.setValue("results", results);
}

////////////////////////////
// this function will fill in the results matrix we initialized in the function above during the appropriate generations.
// within this function is the sampling we do to mimic how pool seq works.
// first we sample 100 individuals from each population to make our "pool" then we sample from the 200 pooled
// gametes according to each loci's empirical coverage data
function (void)SaveVals(void) {
	results = sim.getValue("results");
	cov = sim.getValue("cov");
	gen = sim.generation;
	if(gen == 1) mult = 0;
	if(gen == 7) mult = 1;
	if(gen == 11) mult = 2;
	
	for(pop in 0:(npops-1)) {
		indsample = sim.subpopulations[pop].individuals[sample(0:(popsize - 1), 100)];
		for(pos in 0:(nloci-1)) {
			covsample = indsample.genomes[sample(0:199, cov[pos])];
			results[(mult * npops + pop),(pos + 2)] = sum(covsample.mutations.position == pos) / cov[pos];
		}
	}
	
	sim.setValue("results", results);
}

////////////////////////////
// this function reads in RecomMap.csv
// then selects the row of the csv corresponding to the loci included in this simulation (simnum)
// this row selection is not necessary in the analysis where we do not vary which loci are included
function (numeric)LoadRecomMap(void) {
// these lines are used for running the script locally in the gui
//	lines = readFile("/Users/nathan/Documents/GitHub/EpistasisSim/nlocisnps/RecomMap.csv");
	//	lines = readFile("/media/lee/HDD_Array/nwanderson/EpistasisSim/RecomMap.csv")
	lines = readFile("./RecomMap.csv");
	lines = lines[substr(lines, 0, 1) != "//"];
	line = lines[simnum];
	fields = strsplit(line, ",");
	fields = fields[fields != ""];
	fields = fields[0:(length(fields)-1)];
	return asFloat(fields);
}


////////////////////////////
// this function goes loci by loci and assigns gametes to carry either allele based on that alleles empirical starting freq
// the starting frequencies are altered in the analyses where we do that
// this function also defines the "max polygenic score" for this simulation. Which is the phenotype of a hypothetical individual
// who carried ALL beneficial alleles.
function (void)SetUpStartingPops(void) {
	T0 = sim.getValue("T0");
	selcoef = sim.getValue("selcoef");
	sampledloci = sim.getValue("sampledloci");
	
	
	genomes = sim.subpopulations.genomes;
	for(pos in 0:(nloci-1)){
		genomes[which(rbinom(length(genomes),1,T0[pos])==1)].addNewMutation(m1,selcoef[pos],pos);
	}
	maxpolygenicscore = 2 * sum(selcoef[0:(nloci-1)]);
	sim.setValue("maxpolygenicscore", maxpolygenicscore);
}


////////////////////////////
// this function reads in all of the data needed from sortedsnpdata.csv
function (void)ReadLog(void) {
//	lines = readFile("/Users/nathan/Documents/GitHub/EpistasisSim/nlocisnps/sortedsnpdata.csv");
	//	lines = readFile("/media/lee/HDD_Array/nwanderson/EpistasisSim/EmpT0snps/selected_snps.info.txt");
	lines = readFile("./sortedsnpdata.csv");
	lines = lines[substr(lines, 0, 1) != "//"];
	chr = c();
	//	pos = c();
	haplotype_block= c();
	T0= c();
	selcoef = c();
	cov = c();
	for (line in lines[1:(length(lines) - 1)]){
		fields = strsplit(line, ",");
		
		chr = c(chr, fields[1]);
		//		pos = c(pos, asInteger(fields[2]));
		haplotype_block = c(haplotype_block, fields[3]);
		T0 = c(T0, asFloat(fields[4]));
		selcoef = c(selcoef, asFloat(fields[5]));
		cov = c(cov, asInteger(fields[6]));
	}
	selcoef = abs(selcoef);
	sim.setValue("chr",chr);
	//	sim.setValue("pos",pos);
	sim.setValue("haplotype_block",haplotype_block);
	sim.setValue("T0", T0);
	sim.setValue("selcoef", selcoef);
	sim.setValue("cov", cov);
}

////////////////////////////
// here is where we calculate the fitness of each individual based on the beneficial alleles that they carry.
// first we calculate the individuals phenotype between 0 and 1, then we plug it into the specified fitness function.
function (void)GetFits(void) {
	maxpolygenicscore = sim.getValue("maxpolygenicscore");
	inds = sim.subpopulations.individuals;
	polygenicscore = inds.sumOfMutationsOfType(m1);
	polygenicscore = polygenicscore / maxpolygenicscore;
	
	if(sim.generation == 1){
		horshift = mean(polygenicscore) - 0.392263;
		sim.setValue("horshift",horshift);
	}else{
		horshift = sim.getValue("horshift");
	}
	
	if(fitnessFunction == "directional" | fitnessFunction == 3) {
		inds.fitnessScaling = fmin + ((fmax - fmin) / ((1 + s * exp(r *	((polygenicscore - horshift) + b))) ^(1/s)));
	}
	
	if(fitnessFunction == "diminishingReturns" | fitnessFunction == 4) {
		tmp = fmin + (fmax - fmin) * (1 - 1 / exp(a * ((polygenicscore - horshift) + b)));
		tmp[tmp < 0.0] = 0.0;
		inds.fitnessScaling = tmp;
	}
	
	if(fitnessFunction == "exponential" | fitnessFunction == 1) {
		inds.fitnessScaling = exp(a * ((polygenicscore - horshift))^2);
	}
	
	if(fitnessFunction == "stabilizing" | fitnessFunction == 5) {
		inds.fitnessScaling = exp(-0.5 * (((polygenicscore - horshift) - mu)^2 / std ^ 2));
	}
	// these are interesting for live plotting results in the gui but these if statements are not used in the version of the 
	// script run on the cluster
	if(sim.generation == 1) {
		pgsarray = array(rep(0.0, 3 * npops * popsize), c(3, npops * popsize));
		fitarray = array(rep(0.0, 3 * npops * popsize), c(3, npops * popsize));
		pgsarray[0,] = polygenicscore;
		fitarray[0,] = inds.fitnessScaling;
		sim.setValue("pgsarray", pgsarray);
		sim.setValue('fitarray', fitarray);
//		catn("Gen0:");
//		catn(quantile(polygenicscore, c(0.025,0.975)));
//		catn(quantile(polygenicscore));
	}
	if(sim.generation == 7) {
		pgsarray = sim.getValue("pgsarray");
		fitarray = sim.getValue('fitarray');
		pgsarray[1,] = polygenicscore;
		fitarray[1,] = inds.fitnessScaling;
		sim.setValue("pgsarray", pgsarray);
		sim.setValue('fitarray', fitarray);
	
	}
	if(sim.generation == 11) {
		pgsarray = sim.getValue("pgsarray");
		fitarray = sim.getValue('fitarray');
		pgsarray[2,] = polygenicscore;
		fitarray[2,] = inds.fitnessScaling;
		sim.setValue("pgsarray", pgsarray);
		sim.setValue('fitarray', fitarray);
//		catn("Gen10:");
//		catn(quantile(polygenicscore, c(0.025,0.975)));
//		catn(quantile(polygenicscore));
	}
}

////////////////////////////
// this function reads in sampledloci.csv. Finds the correct row for the current simulation
// and then prunes the data taken in in the ReadLog function above to only include the included loci
function (void)Readsnps(void){
//	lines = readFile("/Users/nathan/Documents/GitHub/EpistasisSim/nlocisnps/sampledloci.csv");
	//	lines = readFile("/media/lee/HDD_Array/nwanderson/EpistasisSim/RecomMap.csv")
	lines = readFile("./sampledloci.csv");
	lines = lines[substr(lines, 0, 1) != "//"];
	Rf =c();
	line = lines[simnum];
	fields = strsplit(line, ",");
	fields = fields[which(nchar(fields) >=1)];
	sampledloci = asInteger(fields);
	sim.setValue("sampledloci", sampledloci);
	
	selcoef = sim.getValue("selcoef")[sampledloci];
	T0 = sim.getValue("T0")[sampledloci];
	sim.setValue("selcoef", selcoef);
	sim.setValue("T0", T0);
}

////////////////////////////
// this function makes some cool liveplots in the gui that show what is happening. this function is not run on the cluster
function (void)MakePlot(void) {
	pgsarray = sim.getValue("pgsarray");
	fitarray = sim.getValue('fitarray');
	x = 0:200 / 200;
	horshift = sim.getValue("horshift");
	if(fitnessFunction == "directional" | fitnessFunction == 3) {
		y = fmin + ((fmax - fmin) / ((1 + s * exp(r *	((x - horshift) + b))) ^(1/s)));
	}
	
	if(fitnessFunction == "diminishingReturns" | fitnessFunction == 4) {
		y = fmin + (fmax - fmin) * (1 - 1 / exp(a * ((x - horshift) + b)));
		y[y < 0.0] = 0.0;
	}
	
	if(fitnessFunction == "exponential"  | fitnessFunction == 1) {
		y = exp(a * ((x - horshift)^2));
	}
	
	if(fitnessFunction == "stabilizing" | fitnessFunction == 5) {
		y = exp(-0.5 * (((x - horshift) - mu)^2 / std ^ 2));
	}
	
	
	
	rstr = paste('{',
		'pgsgen0 <- c(' + paste(pgsarray[0,], sep = ", ") + ')',
		'pgsgen6 <- c(' + paste(pgsarray[1,], sep = ", ") + ')',
		'pgsgen10 <- c(' + paste(pgsarray[2,], sep = ", ") + ')',
		'x <- c(' + paste(x, sep = ", ") + ')',
		'y <- c(' + paste(y, sep = ", ") + ')',
		'png(width=12, height=18, units="in", res=72, file="' + pngPath + '")',
		'par(mar=c(4.0, 4.0, 1.5, 1.5), mfrow = c(2,1))',
		'plot(x = density(pgsgen0)$x, y = density(pgsgen0)$y / max(density(pgsgen0)$y), col = "red", xlim = c(0,1), ylim = c(0,1), type = "l")',
		'lines(x = density(pgsgen6)$x, y = density(pgsgen6)$y / max(density(pgsgen6)$y), col = "green")',
		'lines(x = density(pgsgen10)$x, y = density(pgsgen10)$y / max(density(pgsgen10)$y), col = "blue")',
		'lines(x = x, y = y)',
		///////////////////////////
		'fitgen0 <- c(' + paste(fitarray[0,], sep = ", ") + ')',
		'fitgen6 <- c(' + paste(fitarray[1,], sep = ", ") + ')',
		'fitgen10 <- c(' + paste(fitarray[2,], sep = ", ") + ')',
		'plot(density(fitgen0), xlim = c(min(density(fitgen0)$x), max(density(fitgen10)$x)), col = "red")',
		'lines(density(fitgen6), col = "green")',
		'lines(density(fitgen10), col = "blue")',
		'box()',
		'dev.off()',
		'}', sep="\n");
	
	scriptPath = writeTempFile("plot_", ".R", rstr);
	system(RSCRIPT, args=scriptPath);
	deleteFile(scriptPath);
}
// here we are initializing the simulation
initialize() {
// we set the seed and when we are running in the gui we uncomment the parameter lines. These parameters are fed in through the command
// line when you are running on the cluster
	setSeed(seed);
//	defineGlobal("npops",10);
//	defineGlobal("nloci", 10);
//	defineGlobal("popsize", 1750);
//	defineGlobal("fitnessFunction", "diminishingReturns");
//	defineGlobal("fmin",0);
//	defineGlobal("fmax",1);
//	defineGlobal("s",0.1);
//	defineGlobal("r",-15);
//	defineGlobal("a",10);
//	defineGlobal("b", -0.25);
//	defineGlobal("mu", 0.435);
//	defineGlobal("std", 0.0175);
//	defineGlobal("simnum",3);
	
	initializeMutationRate(0);
	
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	initializeGenomicElementType("g1", m1, 1.0);
	
	initializeGenomicElement(g1, 0, (nloci - 1));
	
	// we switch which of these two lines are commented vs uncommented for when we have a recombination map or are working with unlinked loci
	initializeRecombinationRate(LoadRecomMap(), 1:(nloci-1));
	//	initializeRecombinationRate(0.5);
	
	// this section needs to be uncommented for liveplotting
	
	//	initializing a path to R for running liveplotting	
//	if (fileExists("/usr/bin/Rscript")){
//		defineConstant("RSCRIPT", "/usr/bin/Rscript");
//	}else if (fileExists("/usr/local/bin/Rscript")){
//		defineConstant("RSCRIPT", "/usr/local/bin/Rscript");
//	}else{
//		stop("Couldn't find Rscript.");
//	}
}



// here we are defining our fitness callback. SLiM defaults to the multiplicative fitness function
// for positive or negative epistasis we tack on the exponential term to the end of the default fitness
// for any of the AT models, we replace the default fitness with 1 and use only the 
fitness(m1) {
	if(fitnessFunction == "diminishingReturns" | fitnessFunction == "directional" | fitnessFunction == "stabilizing" |
		fitnessFunction == 3 | fitnessFunction == 4 | fitnessFunction == 5) {
		return 1.0;
	} else {
		return relFitness;
	}
}



//creating our 10 replicate selection lines
1 late() {
	sim.addSubpop("p1", popsize);
	sim.addSubpop("p2", popsize);
	sim.addSubpop("p3", popsize);
	sim.addSubpop("p4", popsize);
	sim.addSubpop("p5", popsize);
	sim.addSubpop("p6", popsize);
	sim.addSubpop("p7", popsize);
	sim.addSubpop("p8", popsize);
	sim.addSubpop("p9", popsize);
	sim.addSubpop("p10", popsize);
	
	// reading in info
	ReadLog();
	Readsnps();
	// initializing mutations at starting freqs
	SetUpStartingPops();
	// creating results matrix
	InitializeFreqArray();
	
	// getting ready for liveplotting
	defineConstant("pngPath", writeTempFile("plot_", ".png", ""));
	if (exists("slimgui"))
		slimgui.openDocument(pngPath);
}


// caliing our fitness callback every generation
1: late() {
	GetFits();
	//	MakePlot();
}


// saving starting values
1 late() {
	SaveVals();
}

// saving information at generation 6
7 late() {
	SaveVals();
}

// saving info at generation 10
11 late() {
	SaveVals();
//	MakePlot();
// end of simulation printing output to the console.
	MakeOutput();
}