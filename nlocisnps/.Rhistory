library(data.table)
# setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
mult <- 6
iter = 1000
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
seed <- sample(1:2^34, 7800)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1300)
a <- rep(c(8,-8,0, 0, 10, 0), each = 1300)
s <- rep(c(0,0,0,0.1,0,0), each = 1300)
r <- rep(c(0,0,0,-15,0,0), each = 1300)
b <- rep(c(0,0,0,-0.3,-0.25,0), each = 1300)
mu <- rep(c(0,0,0,0,0,0.4), each = 1300)
std <- rep(c(0,0,0,0,0,0.07), each = 1300)
nloci <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 100, times = 6)
sim <- 0:(7800-1)
dat <- cbind(seed, fitnessFunction, a, s, r, b, mu, std, nloci, sim)
# fwrite(dat, file = 'params.txt', col.names = F)
sampledloci <- array(dim = c(7800, 121))
for(n in 1:length(nloci)){
sampledloci[n,1:nloci[n]] <- sample(0:120,nloci[n])
}
# fwrite(sampledloci, file = "sampledloci.csv", col.names = F)
fmin <- 0
fmax <- 1
npops <- rep(10, times = mult * iter)
popsize <- 1750
scaleT0 <- 0
scales <- 0
###############
## Test data ##
###############
mult <- 3
iter = 2
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential",
#                          "exponential",
#                          "multiplicative"), each = 2)
fitnessFunction <- rep(c(1,1,2), each = 2)
a <- rep(c(8,-8,0), each = 2)
s <- rep(c(0,0,0), each = 2)
r <- rep(c(0,0,0), each = 2)
b <- rep(c(0,0,0), each = 2)
mu <- rep(c(0,0,0), each = 2)
std <- rep(c(0,0,0), each = 2)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
# fwrite(dat, file = 'testparams.txt', col.names = F)
# # read.csv(file = "figure1parms.txt")
#
#
#
# "slim -d seed=", seeds[i],
# " -d npops=", npops,
# " -d nloci=", nloci,
# " -d popsize=", popsize,
# " -d " ,'"', 'fitnessFunction=', "'", 'exponential', "'", '"',
# " -d fmin=", fmin,
# " -d fmax=", fmax,
# " -d a=", ahat,
# " -d scaleT0=", scaleT0,
# " -d scales=", scales,
# " New.slim | tail -n +14 > output/exponential",
# "_seed=", seeds[i],
# "_a=", ahat,
# "_b=", bhat, ".csv", sep = ""))
source("~/Desktop/parammaker.R")
source("~/Desktop/parammaker.R")
source("~/Desktop/parammaker.R", echo=TRUE)
source("~/Desktop/parammaker.R", echo=TRUE)
library(data.table)
# setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
mult <- 6
iter = 1000
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
seed <- sample(1:2^34, 7800)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1300)
a <- rep(c(8,-8,0, 0, 10, 0), each = 1300)
s <- rep(c(0,0,0,0.1,0,0), each = 1300)
r <- rep(c(0,0,0,-15,0,0), each = 1300)
b <- rep(c(0,0,0,-0.3,-0.25,0), each = 1300)
mu <- rep(c(0,0,0,0,0,0.4), each = 1300)
std <- rep(c(0,0,0,0,0,0.07), each = 1300)
nloci <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 100, times = 6)
sim <- 0:(7800-1)
dat <- cbind(seed, fitnessFunction, a, s, r, b, mu, std, nloci, sim)
# fwrite(dat, file = 'params.txt', col.names = F)
sampledloci <- array(dim = c(7800, 121))
for(n in 1:length(nloci)){
sampledloci[n,1:nloci[n]] <- sample(0:120,nloci[n])
}
# fwrite(sampledloci, file = "sampledloci.csv", col.names = F)
fmin <- 0
fmax <- 1
npops <- rep(10, times = mult * iter)
popsize <- 1750
scaleT0 <- 0
scales <- 0
###############
## Test data ##
###############
mult <- 3
iter = 2
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential",
#                          "exponential",
#                          "multiplicative"), each = 2)
fitnessFunction <- rep(c(1,1,2), each = 2)
a <- rep(c(8,-8,0), each = 2)
s <- rep(c(0,0,0), each = 2)
r <- rep(c(0,0,0), each = 2)
b <- rep(c(0,0,0), each = 2)
mu <- rep(c(0,0,0), each = 2)
std <- rep(c(0,0,0), each = 2)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
# fwrite(dat, file = 'testparams.txt', col.names = F)
# # read.csv(file = "figure1parms.txt")
#
#
#
# "slim -d seed=", seeds[i],
# " -d npops=", npops,
# " -d nloci=", nloci,
# " -d popsize=", popsize,
# " -d " ,'"', 'fitnessFunction=', "'", 'exponential', "'", '"',
# " -d fmin=", fmin,
# " -d fmax=", fmax,
# " -d a=", ahat,
# " -d scaleT0=", scaleT0,
# " -d scales=", scales,
# " New.slim | tail -n +14 > output/exponential",
# "_seed=", seeds[i],
# "_a=", ahat,
# "_b=", bhat, ".csv", sep = ""))
library(data.table)
# setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
mult <- 6
iter = 1000
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
seed <- sample(1:2^34, 7800)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1300)
a <- rep(c(8,-8,0, 0, 10, 0), each = 1300)
s <- rep(c(0,0,0,0.1,0,0), each = 1300)
r <- rep(c(0,0,0,-15,0,0), each = 1300)
b <- rep(c(0,0,0,-0.3,-0.25,0), each = 1300)
mu <- rep(c(0,0,0,0,0,0.4), each = 1300)
std <- rep(c(0,0,0,0,0,0.07), each = 1300)
nloci <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 100, times = 6)
sim <- 0:(7800-1)
dat <- cbind(seed, fitnessFunction, a, s, r, b, mu, std, nloci, sim)
# fwrite(dat, file = 'params.txt', col.names = F)
sampledloci <- array(dim = c(7800, 121))
for(n in 1:length(nloci)){
sampledloci[n,1:nloci[n]] <- sample(0:120,nloci[n])
}
# fwrite(sampledloci, file = "sampledloci.csv", col.names = F)
fmin <- 0
fmax <- 1
npops <- rep(10, times = mult * iter)
popsize <- 1750
scaleT0 <- 0
scales <- 0
###############
## Test data ##
###############
mult <- 3
iter = 2
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential",
#                          "exponential",
#                          "multiplicative"), each = 2)
fitnessFunction <- rep(c(1,1,2), each = 2)
a <- rep(c(8,-8,0), each = 2)
s <- rep(c(0,0,0), each = 2)
r <- rep(c(0,0,0), each = 2)
b <- rep(c(0,0,0), each = 2)
mu <- rep(c(0,0,0), each = 2)
std <- rep(c(0,0,0), each = 2)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
# fwrite(dat, file = 'testparams.txt', col.names = F)
# # read.csv(file = "figure1parms.txt")
#
#
#
# "slim -d seed=", seeds[i],
# " -d npops=", npops,
# " -d nloci=", nloci,
# " -d popsize=", popsize,
# " -d " ,'"', 'fitnessFunction=', "'", 'exponential', "'", '"',
# " -d fmin=", fmin,
# " -d fmax=", fmax,
# " -d a=", ahat,
# " -d scaleT0=", scaleT0,
# " -d scales=", scales,
# " New.slim | tail -n +14 > output/exponential",
# "_seed=", seeds[i],
# "_a=", ahat,
# "_b=", bhat, ".csv", sep = ""))
?fread
install.packages('data.table')
install.packages("data.table")
library(data.table)
?getDTthreads
getDTthreads()
?openMP
?openMP
install.packages("openMp")
install.packages("openMP")
setDTthreads(2)
setwd("~/Documents/GitHub/EpistasisSim/nlocihb/")
rm(list = ls())
library(data.table)
library(doMC)
GetJaccards <- function(rawout, cutoffs){
nloci <- length(cutoffs)
results <- array(dim = c(1,2))
for(gen in 1:2){
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
for(pop in 1:10){
popdat <- rawout[which(rawout[,2] == pop),]
if(gen == 1){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}else if(gen == 2){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}
}
jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
if(length(union(signsnps[[j]], signsnps[[k]])) == 0) jaccmat[j,k] <- 0
# cat("Intersect: ", length(intersect(signsnps[[j]], signsnps[[k]])))
# cat("    Union: ", length(union(signsnps[[j]], signsnps[[k]])), "\n")
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
if(gen == 1) results[,1] <- mean(jaccmat)
if(gen == 2) results[,2] <- mean(jaccmat)
}
return(results)
}
GetCutoffs <- function(rawout){
loci <- colnames(rawout)[3:ncol(rawout)]
loci <- substr(loci,5, nchar(loci))
loci <- as.numeric(loci) + 1
cutoffs <- empdata$Gen10_neutAFC999[loci]
names(cutoffs) <- loci
return(cutoffs)
}
library(data.table)
library(doMC)
library(stringr)
library(foreach)
library(ggraptR)
opts <- list(preschedule = FALSE)
registerDoMC(7)
setwd("/media/lee/HDD_Array/nwanderson/EpistasisSim/jacccalc/MutDrifthb/")
setwd("~/Documents/GitHub/EpistasisSim/nlocihb/")
# setwd("~/Documents/GitHub/EpistasisSim/nlocihb/")
empdata <- fread(file = "sortedhbdata.csv")
setwd("/Volumes/T7/EpistasisSim/nlocihb")
GetJaccards <- function(rawout, cutoffs){
nloci <- length(cutoffs)
results <- array(dim = c(1,2))
for(gen in 1:2){
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
for(pop in 1:10){
popdat <- rawout[which(rawout[,2] == pop),]
if(gen == 1){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}else if(gen == 2){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}
}
jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
if(length(union(signsnps[[j]], signsnps[[k]])) == 0) jaccmat[j,k] <- 0
# cat("Intersect: ", length(intersect(signsnps[[j]], signsnps[[k]])))
# cat("    Union: ", length(union(signsnps[[j]], signsnps[[k]])), "\n")
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
if(gen == 1) results[,1] <- mean(jaccmat)
if(gen == 2) results[,2] <- mean(jaccmat)
}
return(results)
}
GetCutoffs <- function(rawout){
loci <- colnames(rawout)[3:ncol(rawout)]
loci <- substr(loci,5, nchar(loci))
loci <- as.numeric(loci) + 1
cutoffs <- empdata$Gen10_neutAFC999[loci]
names(cutoffs) <- loci
return(cutoffs)
}
library(data.table)
library(doMC)
library(stringr)
library(foreach)
library(ggraptR)
opts <- list(preschedule = FALSE)
registerDoMC(7)
setwd("/media/lee/HDD_Array/nwanderson/EpistasisSim/jacccalc/MutDrifthb/")
library(data.table)
# setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
mult <- 6
iter = 1000
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
seed <- sample(1:2^34, 7800)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1300)
a <- rep(c(8,-8,0, 0, 10, 0), each = 1300)
s <- rep(c(0,0,0,0.1,0,0), each = 1300)
r <- rep(c(0,0,0,-15,0,0), each = 1300)
b <- rep(c(0,0,0,-0.3,-0.25,0), each = 1300)
mu <- rep(c(0,0,0,0,0,0.4), each = 1300)
std <- rep(c(0,0,0,0,0,0.07), each = 1300)
nloci <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 100, times = 6)
sim <- 0:(7800-1)
dat <- cbind(seed, fitnessFunction, a, s, r, b, mu, std, nloci, sim)
sampledloci <- array(dim = c(7800, 121))
for(n in 1:length(nloci)){
sampledloci[n,1:nloci[n]] <- sample(0:120,nloci[n])
}
fmin <- 0
fmax <- 1
npops <- rep(10, times = mult * iter)
popsize <- 1750
scaleT0 <- 0
scales <- 0
mult <- 3
iter = 2
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential",
#                          "exponential",
#                          "multiplicative"), each = 2)
fitnessFunction <- rep(c(1,1,2), each = 2)
a <- rep(c(8,-8,0), each = 2)
s <- rep(c(0,0,0), each = 2)
r <- rep(c(0,0,0), each = 2)
b <- rep(c(0,0,0), each = 2)
mu <- rep(c(0,0,0), each = 2)
GetJaccards <- function(rawout, cutoffs){
nloci <- length(cutoffs)
results <- array(dim = c(1,2))
for(gen in 1:2){
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
for(pop in 1:10){
popdat <- rawout[which(rawout[,2] == pop),]
if(gen == 1){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}else if(gen == 2){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}
}
jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
if(length(union(signsnps[[j]], signsnps[[k]])) == 0) jaccmat[j,k] <- 0
# cat("Intersect: ", length(intersect(signsnps[[j]], signsnps[[k]])))
# cat("    Union: ", length(union(signsnps[[j]], signsnps[[k]])), "\n")
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
if(gen == 1) results[,1] <- mean(jaccmat)
if(gen == 2) results[,2] <- mean(jaccmat)
}
return(results)
}
GetCutoffs <- function(rawout){
loci <- colnames(rawout)[3:ncol(rawout)]
loci <- substr(loci,5, nchar(loci))
loci <- as.numeric(loci) + 1
cutoffs <- empdata$Gen10_neutAFC999[loci]
names(cutoffs) <- loci
return(cutoffs)
}
library(data.table)
library(doMC)
library(stringr)
library(foreach)
library(ggraptR)
opts <- list(preschedule = FALSE)
registerDoMC(7)
setwd("~/Documents/GitHub/EpistasisSim/nlocihb/")
# setwd("~/Documents/GitHub/EpistasisSim/nlocihb/")
empdata <- fread(file = "sortedhbdata.csv")
setwd("/Volumes/T7/EpistasisSim/nlocihb")
# setwd("/media/nathan/T7/EpistasisSim/nlocihb/")
# setwd("/Volumes/T7/EpistasisSim/nlocihb")
FFs <- list.files(path = './SLiMouts/')
sim.results <- array(dim = c(103, 2 * length(FFs) * 13))
sim.results[1,] <- rep(c("positive",
"negative", # 1
"multiplicative", # 2
"directional", # 3
"diminishingReturns", # 4
"stabilizing"), # 5
each = 2, times = 13)
sim.results[2,] <- rep(c(6,10), each = 1, times = 6*13)
sim.results[3,] <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 12, times = 1)
ff = FFs[1]
files <- list.files(path = paste("./SLiMouts/", ff, "/", sep = ''))
splt <- do.call(rbind, strsplit(files, "_"))
nloci = 20
nlocisims <- which(splt[,9] == paste("nloci=", nloci, sep = ""))
files[nlocisims]
paste("./SLiMouts/", ff, "/", sim, sep = '')
sim = files[nlocisims]
sim = sim[1]
path <- paste("./SLiMouts/", ff, "/", sim, sep = '')
rawout <- read.csv(file = path)
rawout <- rawout[,-ncol(rawout)]
cutoffs <- GetCutoffs(rawout = rawout)
meanjaccs <- foreach(sim = files[nlocisims], .options.multicore=opts, .combine = 'rbind') %dopar%{
path <- paste("./SLiMouts/", ff, "/", sim, sep = '')
rawout <- read.csv(file = path)
rawout <- rawout[,-ncol(rawout)]
cutoffs <- GetCutoffs(rawout = rawout)
return(GetJaccards(rawout = rawout, cutoffs = cutoffs))
}
meanjaccs
str(meanjaccs)
which(sim.results[1,] == ff)
str(sim.results)
which(sim.results[3,] == nloci)
which(sim.results[1,] == ff & sim.results[3,] == nloci)
sim.results[1:5,1:5]
# write.csv(sorteddata, file = 'sortedsnpdata.csv')
# fwrite(RecomFractions, file = "RecomMap.csv", col.names = F)
write.table(RecomFractions, file = "RecomMap.csv" sep = ",", col.names = F)
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/nlocisnps/")
x <- readRDS(file = "haplotype_blocks.snp_res.RDS")
y <- readRDS("hap_block_snps.neutral_AFC_cutoffs.RDS")
tmpdata <- cbind(x$chr, x$pos, x$haplotype_block, y$T0, x$selCoef, x$cov, y$Gen10_neutAFC99, y$Gen10_neutAFC999)
tmpdata <- data.frame(tmpdata)
colnames(tmpdata) <- c("chr", 'pos', 'haplotype_block', 'T0', 'selCoef', 'cov', 'Gen10_neutAFC99', 'Gen10_neutAFC999')
tmpdata$pos <- as.integer(tmpdata$pos)
tmpdata$T0 <- as.numeric(tmpdata$T0)
tmpdata$selCoef <- as.numeric(tmpdata$selCoef)
tmpdata$cov <- as.integer(tmpdata$cov)
tmpdata$Gen10_neutAFC99 <- as.numeric(tmpdata$Gen10_neutAFC99)
tmpdata$Gen10_neutAFC999 <- as.numeric(tmpdata$Gen10_neutAFC999)
sorteddata <- c()
for(haps in unique(tmpdata$haplotype_block)){
hapdata <- tmpdata[which(tmpdata$haplotype_block == haps),]
sorteddata <- rbind(sorteddata,hapdata[order(as.integer(hapdata$pos)),])
}
RF.bp <- 0.016 / 1e6
sampledloci <- fread(file = "sampledloci.csv")
RecomFractions <- array(dim = c(7800,4977))
for(sim in 1:nrow(sampledloci)){
simloci <- sort(na.omit(unlist(sampledloci[sim,])))
simloci <- sorteddata[simloci,]
simrecommap <- c()
for(i in unique(simloci$haplotype_block)){
pos <- as.numeric(simloci$pos[simloci$haplotype_block == i])
if(min(diff(pos)) < 0) stop()
RF <- RF.bp * diff(pos)
simrecommap <- c(simrecommap, RF, 0.5)
}
simrecommap <- simrecommap[-length(simrecommap)]
RecomFractions[sim,1:length(simrecommap)] <- simrecommap
}
# write.csv(sorteddata, file = 'sortedsnpdata.csv')
# fwrite(RecomFractions, file = "RecomMap.csv", col.names = F)
write.table(RecomFractions, file = "RecomMap.csv", sep = ",", col.names = F)
