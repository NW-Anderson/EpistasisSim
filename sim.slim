function (void)SaveVals(void) {
	for(pos in 0 :(nloci-1)) {
		
	
	
	
	
	sim.setValue("RR", c(sim.getValue("RR"),mean(pmax(inds.sumOfMutationsOfType(m2), 0.0) /2)));
	sim.setValue("diff", c(sim.getValue("diff"), mean(phenotype) - optimum));
	sim.setValue("meanfit", c(sim.getValue("meanfit"), mean(sim.subpopulations.individuals.fitnessScaling)));
	sim.setValue("phenovar", c(sim.getValue("phenovar"), var(phenotype)));
	if(sim.generation == 1) sim.setValue("Ne", 0);
	if(sim.generation > 1) sim.setValue("Ne", c(sim.getValue("Ne"), 4*popsize /
	 (var(sim.subpopulations.lifetimeReproductiveOutput) + 2)));
}

function (void)SetUpLog(void) {
	log = sim.createLogFile("~/Documents/GitHub/EpistasisSim/sim_log_seed=" + getSeed(), logInterval = 1);
	log.addGeneration();
	log.addCustomColumn("RR", 'RR = sim.getValue("RR"); RR[length(RR) - 1];');
	log.addCustomColumn("diff", 'diff = sim.getValue("diff"); diff[length(diff) - 1];');
	log.addCustomColumn("meanfit", 'meanfit = sim.getValue("meanfit"); meanfit[length(meanfit) -1];');
	log.addCustomColumn("phenovar", 'phenovar = sim.getValue("phenovar"); phenovar[length(phenovar)-1];');
	log.addCustomColumn("Ne", 'ne = sim.getValue("Ne"); ne[length(ne)-1];');
}

function (void)SetUpStartingPops(void) {
	startfreq = sim.getValue("startfreq");
	selcoef = sim.getValue("selcoef");

	genomes = sim.subpopulations.genomes;
	for(pos in 0:(nloci-1)){
		genomes[which(rbinom(length(genomes),1,startfreq[pos])==1)].addNewMutation(m1,selcoef[pos],pos);
	}
}

function (void)ReadLog(void) {
	lines = readFile("~/Documents/GitHub/EpistasisSim/selected_snps.info.txt");
	lines = lines[substr(lines, 0, 1) != "//"];
	selcoef = c();
	startfreq = c();
	for (line in lines[1:(length(lines) - 1)]){
		fields = strsplit(line, ",");
		selcoef = c(selcoef, asFloat(fields[2]));
		startfreq = c(startfreq, asFloat(fields[3]));
	}
	sim.setValue("selcoef", selcoef);
	sim.setValue("startfreq", startfreq);
}
// set up a simple neutral simulation
initialize() {
	defineGlobal("npops",10);
	defineGlobal("nloci", 1156);
	defineGlobal("RR", 0.5);
	
	initializeMutationRate(0);
	
	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length 100 kb with uniform recombination
	initializeGenomicElement(g1, 0, (nloci - 1));
	initializeRecombinationRate(RR);
}

// create a population of 500 individuals
1 {
	sim.addSubpop("p1", 500);
	sim.addSubpop("p2", 500);
	sim.addSubpop("p3", 500);
	sim.addSubpop("p4", 500);
	sim.addSubpop("p5", 500);
	sim.addSubpop("p6", 500);
	sim.addSubpop("p7", 500);
	sim.addSubpop("p8", 500);
	sim.addSubpop("p9", 500);
	sim.addSubpop("p10", 500);

	
	ReadLog();
	SetUpLog();
	SetUpStartingPops();
}



// output samples of 10 genomes periodically, all fixed mutations at end

20000 late() { sim.outputFixedMutations(); }
