}
}
sd(x)
###########
## Loops ##
###########
run <- T
while (run) {
x <- rnorm(n = 200000)
if(sd(x) < 0.5){
run <- F
}else{
paste(round(sd(x), digits = 2))
}
}
###########
## Loops ##
###########
run <- T
while (run) {
x <- rnorm(n = 200)
if(sd(x) < 0.5){
run <- F
}else{
print(round(sd(x), digits = 2))
}
}
###########
## Loops ##
###########
run <- T
while (run) {
x <- rnorm(n = 100)
if(sd(x) < 0.5){
run <- F
}else{
print(round(sd(x), digits = 2))
}
}
x <- rnorm(n = 20)
while (run) {
x <- rnorm(n = 20)
if(sd(x) < 0.5){
run <- F
}else{
print(round(sd(x), digits = 2))
}
}
sd(x)
###########
## Loops ##
###########
run <- T
stds <- c()
while (run) {
x <- rnorm(n = 20)
if(sd(x) < 0.5){
run <- F
}else{
print(round(sd(x), digits = 2))
}
stds <- c(stds, sd(x))
}
plot(density(stds))
sd(stds)
prod
candidate <- sample(1:1e6, size = 1)
###########
## Loops ##
###########
mysample <- c()
while (length(mysample) < 100) {
candidate <- sample(1:1e6, size = 1)
if(candidate %% 3 != 0) mysample <- c(mysample, candidate)
}
strsplit(12)
strsplit("12", split = "")
digits
candidate <- sample(1:1e6, size = 1)
digits <- strsplit(as.character(candidate), split = "")
x <- isOdd(12)
isOdd <- function(number){
if(number %% 2 == 1){
paste(number, "is odd.")
}else{
paste(number, "is even.")
}
number
}
isOdd(4)
isOdd(111)
x <- isOdd(12)
isOdd <- function(number){
if(number %% 2 == 1){
paste(number, "is odd.")
}else{
paste(number, "is even.")
}
return("put what you wnt to return here")
}
isOdd(4)
isOdd(111)
isOdd(4)
isOdd <- function(number){
if(number %% 2 == 1){
paste(number, "is odd.")
}else{
paste(number, "is even.")
}
return("put what you wnt to return here")
}
isOdd(4)
result <- 1
for(i in c(3,4,5)){
result <- result * i
print(result)
}
state
?state
state.division
unique(state.division)
"a" %in% "nathan"
all.equal("a", "nathan")
x <- c("ab", "bc")
substr(x, start = 1, end = 1)
?substr
substr(x, start = 1, stop = 1)
for(mu in c(0,1,2)){
mean(rnorm(10, mean = mu))
}
for(mu in c(0,1,2)){
mean(rnorm(10, mean = mu))
}
print(mean(rnorm(10, mean = mu)))
for(mu in c(0,1,2)){
print(mean(rnorm(10, mean = mu)))
}
for(mu in c(0,1,2)){
print(mean(rnorm(10, mean = mu)))
}
####
setwd("~/Documents/GitHub/EpistasisSim/alphaComparison")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
treatment <- c(rep(c("B. alpha = 8",
"C. alpha = - 8",
"D. alpha = 36.5",
"A. alpha = 0\n    (Multiplicative)"), each = 2000))
generation <- c(rep(c(6,10), each = 1000, times = 4))
jaccards <- c()
for(i in 1:8){
jaccards <- c(jaccards, jaccmatrix[3:1002,i])
}
jaccards <- as.numeric(c(jaccards))
data <- data.frame(treatment, generation, jaccards)
# data <- data[-which(data$treatment == "E. Truncating QT" |
#                       data$treatment == "F. Stabilizing QT"),]
# ggraptR(data)
ggplot(data, aes(y=jaccards, x=as.factor(treatment))) +
geom_boxplot(aes(fill=as.factor(generation)), stat="boxplot", position="dodge", alpha=0.5, width=0.3) +
theme_bw() +
theme(text=element_text(family="sans", face="plain", color="#000000", size=20, hjust=0.5, vjust=0.5)) +
guides(fill=guide_legend(title="Generation")) + # ggtitle("121 Hap Blocks. Empirical T0") +
xlab("Fitness Function") +
ylab("Jaccard Score") +
ylim(c(0,1)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
scale_color_manual(values = viridis(12)[c(3,12)]) +
scale_fill_manual(values = viridis(12)[c(3,12)]) +
geom_hline(yintercept=empjaccs[1], linetype="dashed", color = turbo(12)[11]) +
geom_hline(yintercept=empjaccs[2], linetype="dashed", color = turbo(12)[11])
################################
###
totaldata <- array()
setwd("~/Documents/GitHub/EpistasisSim/nlociAlphahb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "alpha=8") fitfun <- c(fitfun, "E. alpha = 8")
if(jaccmatrix[1,c] == "alpha=-8") fitfun <- c(fitfun, "B. alpha = - 8")
if(jaccmatrix[1,c] == "alpha=1") fitfun <- c(fitfun, "D. alpha = 1")
if(jaccmatrix[1,c] == "alpha=-1") fitfun <- c(fitfun, "B. alpha = - 1")
if(jaccmatrix[1,c] == "alpha=36.5629892630851") fitfun <- c(fitfun, "C. alpha = 36.5")
if(jaccmatrix[1,c] == "alpha=-36.5629892630851") fitfun <- c(fitfun, "A. alpha = -36.5")
if(jaccmatrix[1,c] == "alpha=0") fitfun <- c(fitfun, "B. alpha = 0\n    (Multiplicative)")
}
fitfun <- c(fitfun, rep('E. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 182)
meanjac <- c(colMeans(meanjac), empjaccs)
data <- data.frame(fitfun, Generation, nloci, meanjac)
data <- data[-which(data$fitfun == "B. alpha = - 8" | data$fitfun == "E. alpha = 8" |
data$fitfun == "D. alpha = 1" | data$fitfun == "B. alpha = - 1"),]
totaldata <- rbind(totaldata, data)
setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "positive") fitfun <- c(fitfun, "B. Positive Epistasis")
if(jaccmatrix[1,c] == "negative") fitfun <- c(fitfun, "C. Negative Epistasis")
if(jaccmatrix[1,c] == "multiplicative") fitfun <- c(fitfun, "A. Multiplicative")
if(jaccmatrix[1,c] == "directional") fitfun <- c(fitfun, "D. Directional QT")
if(jaccmatrix[1,c] == "diminishingReturns") fitfun <- c(fitfun, "E. Truncating QT")
if(jaccmatrix[1,c] == "stabilizing") fitfun <- c(fitfun, "F. Stabilizing QT")
}
fitfun <- c(fitfun, rep('G. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac <- c(colMeans(meanjac), empjaccs)
data = data.frame(fitfun, Generation, nloci, meanjac)
data = data[which(data$fitfun == "D. Directional QT"),]
totaldata <- rbind(totaldata, data)
totaldata <- totaldata[-1,]
ggplot(totaldata, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(Generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="Generation")) +
guides(colour=guide_legend(title="Fitness Function")) +
xlab("Number of Loci") +
ylab("Mean Jaccard Score") +
scale_color_manual(values = turbo(11)[c(1,6,9,4,11)]) +
geom_hline(yintercept=empjaccs[1], linetype="dashed", color = turbo(11)[11]) +
geom_hline(yintercept=empjaccs[2], linetype="dashed", color = turbo(11)[11])
# scale_color_viridis(discrete = T, option = "turbo") +
# scale_fill_viridis(discrete = T, option = "turbo")
library(data.table)
library(ggraptR)
library(gridExtra)
library(viridis)
library(matrixStats)
dev.off()
simData <- array()
setwd("~/Documents/GitHub/EpistasisSim/nlociAlphahb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "alpha=8") fitfun <- c(fitfun, "E. alpha = 8")
if(jaccmatrix[1,c] == "alpha=-8") fitfun <- c(fitfun, "B. alpha = - 8")
if(jaccmatrix[1,c] == "alpha=1") fitfun <- c(fitfun, "D. alpha = 1")
if(jaccmatrix[1,c] == "alpha=-1") fitfun <- c(fitfun, "B. alpha = - 1")
if(jaccmatrix[1,c] == "alpha=36.5629892630851") fitfun <- c(fitfun, "C. alpha = 36.5")
if(jaccmatrix[1,c] == "alpha=-36.5629892630851") fitfun <- c(fitfun, "A. alpha = -36.5")
if(jaccmatrix[1,c] == "alpha=0") fitfun <- c(fitfun, "B. alpha = 0\n    (Multiplicative)")
}
Generation <- c(as.numeric(jaccmatrix[2,]))
nloci <- c(as.numeric(jaccmatrix[3,]))
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 182)
minjac <- colRanges(meanjac)[,1]
maxjac <- colRanges(meanjac)[,2]
meanjac <- colMeans(meanjac)
data <- data.frame(fitfun, Generation, nloci, meanjac, minjac, maxjac)
data <- data[-which(data$fitfun == "B. alpha = - 8" | data$fitfun == "E. alpha = 8" |
data$fitfun == "D. alpha = 1" | data$fitfun == "B. alpha = - 1"),]
simData <- rbind(simData, data)
setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "positive") fitfun <- c(fitfun, "B. Positive Epistasis")
if(jaccmatrix[1,c] == "negative") fitfun <- c(fitfun, "C. Negative Epistasis")
if(jaccmatrix[1,c] == "multiplicative") fitfun <- c(fitfun, "A. Multiplicative")
if(jaccmatrix[1,c] == "directional") fitfun <- c(fitfun, "D. Directional QT")
if(jaccmatrix[1,c] == "diminishingReturns") fitfun <- c(fitfun, "E. Truncating QT")
if(jaccmatrix[1,c] == "stabilizing") fitfun <- c(fitfun, "F. Stabilizing QT")
}
Generation <- c(as.numeric(jaccmatrix[2,]))
nloci <- c(as.numeric(jaccmatrix[3,]))
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
minjac <- colRanges(meanjac)[,1]
maxjac <- colRanges(meanjac)[,2]
meanjac <- colMeans(meanjac)
data <- data.frame(fitfun, Generation, nloci, meanjac, minjac, maxjac)
data = data[which(data$fitfun == "D. Directional QT"),]
simData <- rbind(simData, data)
simData <- simData[-1,]
simData <- simData[which(simData$nloci != 120),]
nloci <- rep(c(seq(10,110, by = 10), 121), each = 2)
Generation <- rep(c(6,10), times = 12)
jac <- rep(empjaccs, times = 12)
fitfun <- rep("Empirical", times = 24)
empData <- data.frame(Generation, nloci, jac, fitfun)
ggplot(simData, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(Generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="Generation")) +
guides(colour=guide_legend(title="Fitness Function")) +
xlab("Number of Loci") +
ylab("Mean Jaccard Score") +
scale_color_manual(values = turbo(11)[c(1,6,9,4,11)]) +
geom_point(data = empData, aes(y=jac,
x=nloci,
shape=as.factor(Generation),
colour = fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=c(rep(2, times= 22), 4,4)) +
geom_line(data = empData, aes(y=jac,
x=nloci,
colour=fitfun,
shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
linetype = "dashed",
size = 1.25)
dgeom_hline(yintercept=empjaccs[1], linetype="dashed", color = turbo(11)[11]) +
geom_hline(yintercept=empjaccs[2], linetype="dashed", color = turbo(11)[11])
ggplot(simData, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(Generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="Generation")) +
guides(colour=guide_legend(title="Fitness Function")) +
xlab("Number of Loci") +
ylab("Mean Jaccard Score") +
scale_color_manual(values = turbo(11)[c(1,6,9,4,11)]) +
geom_point(data = empData, aes(y=jac,
x=nloci,
shape=as.factor(Generation),
colour = fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=c(rep(2, times= 22), 4,4)) +
geom_line(data = empData, aes(y=jac,
x=nloci,
colour=fitfun,
shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
linetype = "dashed",
size = 1.25)
array(1:6, dim = c(3,2))
?array
array(1:6, dim = c(3,2), by.row = T)
matrix(1:6, dim = c(3,2))
matrix(1:6, nrow = 2)
matrix(1:6, nrow = 3)
matrix(1:6, nrow = 3, byrow = T)
array(1:8, dim = (2,2,2))
array(1:8, dim = (2,2,2))
array(1:8, dim = c(2,2,2))
pollinator.data <- array(dim = c(3,3), dimnames = c("Flower Color","Area"))
pollinator.data <- array(dim = c(3,3), dimnames = list("Flower Color" = c("Red", "Blue", "Green"),
"Area" = c(1,2,3)))
pollinator.data
pollinator.data["Red",]
pollinator.data["Red","2"] <- 3
pollinator.data
pollinator.data["2", "Blue"]
pollinator.data <- rbind(c(1,2,3),
c(4,5,6),
c(7,8,9))
pollinator.data
pollinator.data[,] <- rbind(c(1,2,3),
c(4,5,6),
c(7,8,9))
pollinator.data
pollinator.data <- array(dim = c(3,3), dimnames = list("Flower Color" = c("Red", "Blue", "Green"),
"Area" = c(1,2,3)))
pollinator.data[,] <- rbind(c(1,2,3),
c(4,5,6),
c(7,8,9))
pollinator.data
pollinator.data["Green","Area2", "Replicate3" ] <- 2
pollinator.data <- array(dim = c(3,3,3), dimnames = list("Flower Color" = c("Red", "Blue", "Green"),
"Area" = c("Area1", "Area2", "Area3"),
"Repliate" = paste("Replicate", 1:3, sep = "")))
pollinator.data["Green","Area2", "Replicate3" ] <- 2
FlowerColor <- rep(c("Red", "Blue", "Green"), times = 3)
FlowerColor <- rep(c("Red", "Blue", "Green"), times = 3)
Area <- rep(c("Area1", "Area2", "Area3"), each = 3)
cbind(FlowerColor, Area)
FlowerColor <- rep(c("Red", "Blue", "Green"), times = 3, each = 3)
Area <- rep(c("Area1", "Area2", "Area3"), each = 9)
cbind(FlowerColor, Area)
Replicate <- rep(paste("Replicate", 1:3, sep = ""), times = 9)
cbind(FlowerColor, Area, Replicate)
df <- data.frame(FlowerColor, Area, Replicate, Visits)
FlowerColor <- rep(c("Red", "Blue", "Green"), times = 3, each = 3)
Area <- rep(c("Area1", "Area2", "Area3"), each = 9)
Replicate <- rep(paste("Replicate", 1:3, sep = ""), times = 9)
Visits <- round(rnorm(27, mean = 10, sd  = 2))
df <- data.frame(FlowerColor, Area, Replicate, Visits)
df
df$Visits
dh$height <- runif(27, 5,6)
df$height <- runif(27, 5,6)
iris
str(iris)
names(iris)
?read.excel
??read.excel
str(iris)
sort(unique(iris$Species))
sin(6)
library(ggraptR)
ggraptR(iris)
##########################
## Part 2 of Work Sheet ##
##########################
##############
## Plotting ##
##############
mtcars
str(mtcars)
ggraptR(mtcars)
?mtcars
ggraptR(mtcars)
ggraptR(ChickWeight)
data()
str(bird.orders)
str(PlantGrowth)
str(Titanic)
str(ability.cov)
str(airquality)
str(cars)
str(crimtab)
str(discoveries)
str(faithful)
str(npk)
ggraptR(npk)
str(rock)
str(sleep)
str(diamonds)
str(midwest)
?mpg
str(mpg)
str(msleep)
