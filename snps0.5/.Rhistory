opts <- list(preschedule = FALSE)
registerDoMC(7)
# setwd("/media/lee/HDD_Array/nwanderson/EpistasisSim/jacccalc/nlociAlpha/")
setwd("~/Documents/GitHub/EpistasisSim/nlociAlpha/")
empdata <- fread(file = "sortedhbdata.csv")
# setwd("/media/nathan/T7/EpistasisSim/nlocihb/")
setwd("/Volumes/T7/EpistasisSim/nlociAlpha")
alphas <- list.files(path = './SLiMouts/')
sim.results <- array(dim = c(103, 2 * length(alphas) * 13))
sim.results[1,] <- rep(paste("alpha=", c(8,-8,1,-1,15,-15,0), sep = ""),
each = 2, times = 13)
sim.results[2,] <- rep(c(6,10), each = 1, times = 7*13)
sim.results[3,] <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 14, times = 1)
GetJaccards <- function(rawout, cutoffs){
nloci <- length(cutoffs)
results <- array(dim = c(1,2))
for(gen in 1:2){
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
for(pop in 1:10){
popdat <- rawout[which(rawout[,2] == pop),]
if(gen == 1){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}else if(gen == 2){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}
}
jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
if(length(union(signsnps[[j]], signsnps[[k]])) == 0) jaccmat[j,k] <- 0
# cat("Intersect: ", length(intersect(signsnps[[j]], signsnps[[k]])))
# cat("    Union: ", length(union(signsnps[[j]], signsnps[[k]])), "\n")
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
if(gen == 1) results[,1] <- mean(jaccmat)
if(gen == 2) results[,2] <- mean(jaccmat)
}
return(results)
}
GetCutoffs <- function(rawout){
loci <- colnames(rawout)[3:ncol(rawout)]
loci <- substr(loci,5, nchar(loci))
loci <- as.numeric(loci) + 1
cutoffs <- empdata$Gen10_neutAFC999[loci]
names(cutoffs) <- loci
return(cutoffs)
}
library(data.table)
library(doMC)
library(stringr)
library(foreach)
library(ggraptR)
opts <- list(preschedule = FALSE)
registerDoMC(7)
# setwd("/media/lee/HDD_Array/nwanderson/EpistasisSim/jacccalc/nlociAlpha/")
setwd("~/Documents/GitHub/EpistasisSim/nlociAlpha/")
empdata <- fread(file = "sortedhbdata.csv")
# setwd("/media/nathan/T7/EpistasisSim/nlocihb/")
setwd("/Volumes/T7/EpistasisSim/nlociAlpha")
alphas <- list.files(path = './SLiMouts/')
sim.results <- array(dim = c(103, 2 * length(alphas) * 13))
sim.results[1,] <- rep(paste("alpha=", c(8,-8,1,-1,15,-15,0), sep = ""),
each = 2, times = 13)
sim.results[2,] <- rep(c(6,10), each = 1, times = 7*13)
sim.results[3,] <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 14, times = 1)
for(a in alphas){
files <- list.files(path = paste("./SLiMouts/", a, "/", sep = ''))
splt <- do.call(rbind, strsplit(files, "_"))
for(nloci in c(seq(from = 10, to = 120, by = 10), 121)){
nlocisims <- which(splt[,9] == paste("nloci=", nloci, sep = ""))
meanjaccs <- foreach(sim = files[nlocisims],
.options.multicore=opts,
.combine = 'rbind') %dopar%{
path <- paste("./SLiMouts/", a, "/", sim, sep = '')
rawout <- read.csv(file = path)
rawout <- rawout[,-ncol(rawout)]
cutoffs <- GetCutoffs(rawout = rawout)
return(GetJaccards(rawout = rawout,
cutoffs = cutoffs))
}
sim.results[4:103, which(sim.results[1,] == a & sim.results[3,] == nloci)] <- meanjaccs
}
}
write.csv(sim.results, file = "sim.results.csv")
setwd("~/Documents/GitHub/EpistasisSim/hb0.5")
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/hb0.5")
mult <- 6
iter = 1000
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1000)
a <- rep(c(8,-8,0, 0, 10, 0), each = 1000)
s <- rep(c(0,0,0,0.1,0,0), each = 1000)
r <- rep(c(0,0,0,-15,0,0), each = 1000)
b <- rep(c(0,0,0,-0.3,-0.25,0), each = 1000)
mu <- rep(c(0,0,0,0,0,0.4), each = 1000)
std <- rep(c(0,0,0,0,0,0.07), each = 1000)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
fmin <- 0
fwrite(dat, file = 'params.txt', col.names = F)
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/hb0.5/")
x <- readRDS(file = "hap_blocks.res.RDS")
y <- readRDS("hap_blocks.neutral_AFC_cutoffs.RDS")
y$T0
min(y$T0 - 0.5)
min(abs(y$T0 - 0.5))
which(abs(y$T0 - 0.5) == min(abs(y$T0 - 0.5)))
mutdriftinfo <- fread(file = "../MutDrifthb/mutdriftinfo.csv")
min(mutdriftinfo$AF - 0.5)
min(abs(mutdriftinfo$AF - 0.5))
which(mutdriftinfo$AF == 0.5)
str(mutdriftinfo)
dim(mutdriftinfo)
mutdriftinfo[which(mutdriftinfo$AF == 0.5),]
z <- mutdriftinfo[which(mutdriftinfo$AF == 0.5),]
plot(density(z$Gen10_AFC999))
mean(z$Gen10_AFC999)
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/hb0.5/")
x <- readRDS(file = "hap_blocks.res.RDS")
y <- readRDS("hap_blocks.neutral_AFC_cutoffs.RDS")
tmpdata <- cbind(x$chr, x$start, x$stop, x$tag, y$T0, x$selCoef, x$cov, y$Gen10_neutAFC99, y$Gen10_neutAFC999)
tmpdata <- data.frame(tmpdata)
colnames(tmpdata) <- c("chr", 'start', 'stop', 'haplotype_block', 'T0', 'selCoef', 'cov', 'Gen10_neutAFC99', 'Gen10_neutAFC999')
tmpdata$start <- as.integer(tmpdata$start)
tmpdata$stop <- as.integer(tmpdata$stop)
tmpdata$T0 <- as.numeric(tmpdata$T0)
tmpdata$selCoef <- as.numeric(tmpdata$selCoef)
tmpdata$cov <- as.integer(tmpdata$cov)
tmpdata$Gen10_neutAFC99 <- as.numeric(tmpdata$Gen10_neutAFC99)
tmpdata$Gen10_neutAFC999 <- as.numeric(tmpdata$Gen10_neutAFC999)
sorteddata <- c()
for(haps in unique(tmpdata$haplotype_block)){
hapdata <- tmpdata[which(tmpdata$haplotype_block == haps),]
sorteddata <- rbind(sorteddata,hapdata[order(as.integer(hapdata$start)),])
}
z <- fread(file = "mutdriftinfo.csv")
tmpdata <- cbind(x$chr, x$start, x$stop, x$tag, y$T0, x$selCoef, x$cov, y$Gen10_neutAFC99, y$Gen10_neutAFC999)
tmpdata <- data.frame(tmpdata)
colnames(tmpdata) <- c("chr", 'start', 'stop', 'haplotype_block', 'T0', 'selCoef', 'cov', 'Gen10_neutAFC99', 'Gen10_neutAFC999')
tmpdata$start <- as.integer(tmpdata$start)
tmpdata$stop <- as.integer(tmpdata$stop)
tmpdata$T0 <- as.numeric(tmpdata$T0)
tmpdata$selCoef <- as.numeric(tmpdata$selCoef)
tmpdata$cov <- as.integer(tmpdata$cov)
tmpdata$Gen10_neutAFC99 <- as.numeric(tmpdata$Gen10_neutAFC99)
tmpdata$Gen10_neutAFC999 <- as.numeric(tmpdata$Gen10_neutAFC999)
sorteddata <- c()
for(haps in unique(tmpdata$haplotype_block)){
hapdata <- tmpdata[which(tmpdata$haplotype_block == haps),]
sorteddata <- rbind(sorteddata,hapdata[order(as.integer(hapdata$start)),])
}
sorteddata$T0 <- rep(0.5, times = 121)
which(z$AF == 0.5)
which(z$AF == 0.5)
z$Gen10_AFC99[which(z$AF == 0.5)]
z[which(z$AF == 0.5)]
mean(z$Gen10_AFC99[which(z$AF == 0.5)])
sorteddata$Gen10_neutAFC99 <- rep(mean(z$Gen10_AFC99[which(z$AF == 0.5)]), times = 121)
sorteddata$Gen10_neutAFC999 <- rep(mean(z$Gen10_AFC999[which(z$AF == 0.5)]), times = 121)
write.csv(sorteddata, file = "sortedhbdata.csv")
GetJaccards <- function(rawout, cutoffs){
nloci <- length(cutoffs)
results <- array(dim = c(1,2))
for(gen in 1:2){
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
for(pop in 1:10){
popdat <- rawout[which(rawout[,2] == pop),]
if(gen == 1){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}else if(gen == 2){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}
}
jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
if(length(union(signsnps[[j]], signsnps[[k]])) == 0) jaccmat[j,k] <- 0
# cat("Intersect: ", length(intersect(signsnps[[j]], signsnps[[k]])))
# cat("    Union: ", length(union(signsnps[[j]], signsnps[[k]])), "\n")
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
if(gen == 1) results[,1] <- mean(jaccmat)
if(gen == 2) results[,2] <- mean(jaccmat)
}
return(results)
}
GetCutoffs <- function(rawout){
loci <- colnames(rawout)[3:ncol(rawout)]
loci <- substr(loci,5, nchar(loci))
loci <- as.numeric(loci) + 1
cutoffs <- empdata$Gen10_neutAFC999[loci]
names(cutoffs) <- loci
return(cutoffs)
}
library(data.table)
library(doMC)
library(stringr)
library(foreach)
library(ggraptR)
opts <- list(preschedule = FALSE)
registerDoMC(7)
# setwd("/media/lee/HDD_Array/nwanderson/EpistasisSim/jacccalc/nlociAlpha/")
setwd("~/Documents/GitHub/EpistasisSim/nlociAlpha/")
empdata <- fread(file = "sortedhbdata.csv")
# setwd("/media/nathan/T7/EpistasisSim/nlocihb/")
setwd("/Volumes/T7/EpistasisSim/nlociAlpha")
alphas <- list.files(path = './SLiMouts/')
sim.results <- array(dim = c(103, 2 * length(alphas) * 13))
sim.results[1,] <- rep(paste("alpha=", c(8,-8,1,-1,15,-15,0), sep = ""),
each = 2, times = 13)
sim.results[2,] <- rep(c(6,10), each = 1, times = 7*13)
sim.results[3,] <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 14, times = 1)
for(a in alphas){
files <- list.files(path = paste("./SLiMouts/", a, "/", sep = ''))
splt <- do.call(rbind, strsplit(files, "_"))
for(nloci in c(seq(from = 10, to = 120, by = 10), 121)){
nlocisims <- which(splt[,9] == paste("nloci=", nloci, sep = ""))
meanjaccs <- foreach(sim = files[nlocisims],
.options.multicore=opts,
.combine = 'rbind') %dopar%{
path <- paste("./SLiMouts/", a, "/", sim, sep = '')
rawout <- read.csv(file = path)
rawout <- rawout[,-ncol(rawout)]
cutoffs <- GetCutoffs(rawout = rawout)
return(GetJaccards(rawout = rawout,
cutoffs = cutoffs))
}
sim.results[4:103, which(sim.results[1,] == a & sim.results[3,] == nloci)] <- meanjaccs
}
}
write.csv(sim.results, file = "sim.results.csv")
setwd("~/Documents/GitHub/EpistasisSim/nlociAlphahb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
jaccmatrix[1,c]
jaccmatrix[1,]
unique(jaccmatrix[1,])
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "alpha=8") fitfun <- c(fitfun, "alpha=8")
if(jaccmatrix[1,c] == "alpha=-8") fitfun <- c(fitfun, "alpha=-8")
if(jaccmatrix[1,c] == "alpha=1") fitfun <- c(fitfun, "alpha=1")
if(jaccmatrix[1,c] == "alpha=-1") fitfun <- c(fitfun, "alpha=-1")
if(jaccmatrix[1,c] == "alpha=15") fitfun <- c(fitfun, "alpha=15")
if(jaccmatrix[1,c] == "alpha=-15") fitfun <- c(fitfun, "alpha=-15")
if(jaccmatrix[1,c] == "alpha=0") fitfun <- c(fitfun, "alpha=0")
}
fitfun <- c(fitfun, rep('G. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac <- jaccmatrix[4:103,]
str(meanjac)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 182)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 182)
meanjac <- c(colMeans(meanjac), empjaccs)
data = data.frame(fitfun, Generation, nloci, meanjac)
ggplot(data, aes(y=meanjac, x=nloci)) +
geom_point(aes(shape=as.factor(Generation), colour=fitfun),
stat="identity",
position="identity",
alpha=0.5,
size=4) +
geom_line(aes(colour=fitfun, shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.5,
size = 1.25) +
theme_grey() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=15,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title="Generation")) +
guides(colour=guide_legend(title="Fitness Function")) +
xlab("Number of loci") +
ylab("Mean Jaccard Score")
setwd("/media/nathan/T7/EpistasisSim/hb0.5")
setwd("/Volumes/T7/EpistasisSim/hbT0.5")
setwd("/Volumes/T7/EpistasisSim/hbT0.5")
filenames <- list.files(path = './SLiMouts/')
########################
## Internal Functions ##
########################
parsefilenames <- function(filenames){
FFs <- c("positive",
"negative", # 1
"multiplicative", # 2
"directional", # 3
"diminishingReturns", # 4
"stabilizing") # 5
for(ff in FFs){
system(paste("mkdir ./SLiMOuts/", ff, sep = ""))
}
for(i in 1:length(filenames)){
split <- strsplit(filenames[i], "_")[[1]]
split[length(split)] <- substr(split[length(split)], 1, nchar(split[length(split)]) - 4)
if(split[1] == "ff=1" & split[3] == "a=-8") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/negative/", sep = ""))
if(split[1] == "ff=1" & split[3] == "a=8") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/positive/", sep = ""))
if(split[1] == "ff=2") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/multiplicative/", sep = ""))
if(split[1] == "ff=3") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/directional/", sep = ""))
if(split[1] == "ff=4") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/diminishingReturns/", sep = ""))
if(split[1] == "ff=5") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/stabilizing/", sep = ""))
}
}
parsefilenames(filenames = filenames)
# setwd("/media/lee/HDD_Array/nwanderson/EpistasisSim/jacccalc/EmpT0hb/")
setwd("~/Documents/GitHub/EpistasisSim/hb0.5/")
setwd("/media/nathan/T7/EpistasisSim/hbT0.5/")
GetJaccards <- function(rawout, cutoffs){
nloci <- length(cutoffs)
results <- array(dim = c(1,2))
for(gen in 1:2){
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
for(pop in 1:10){
popdat <- rawout[which(rawout[,2] == pop),]
if(gen == 1){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}else if(gen == 2){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}
}
jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
if(length(union(signsnps[[j]], signsnps[[k]])) == 0) jaccmat[j,k] <- 0
# cat("Intersect: ", length(intersect(signsnps[[j]], signsnps[[k]])))
# cat("    Union: ", length(union(signsnps[[j]], signsnps[[k]])), "\n")
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
if(gen == 1) results[,1] <- mean(jaccmat)
if(gen == 2) results[,2] <- mean(jaccmat)
}
return(results)
}
library(data.table)
library(doMC)
library(stringr)
library(foreach)
library(ggraptR)
library(data.table)
opts <- list(preschedule = FALSE)
registerDoMC(7)
GetJaccards <- function(rawout, cutoffs){
nloci <- length(cutoffs)
results <- array(dim = c(1,2))
for(gen in 1:2){
signsnps <- vector("list",10)
names(signsnps) <- paste('pop', 1:10)
for(pop in 1:10){
popdat <- rawout[which(rawout[,2] == pop),]
if(gen == 1){
signsnps[[pop]] <- which((popdat[2,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}else if(gen == 2){
signsnps[[pop]] <- which((popdat[3,3:ncol(popdat)] - popdat[1,3:ncol(popdat)]) >= cutoffs[1:nloci])
}
}
jaccmat <- array(dim = c(10,10))
for(j in 1:9){
for(k in (j+1):10){
jaccmat[j,k] <- length(intersect(signsnps[[j]], signsnps[[k]])) / length(union(signsnps[[j]], signsnps[[k]]))
if(length(union(signsnps[[j]], signsnps[[k]])) == 0) jaccmat[j,k] <- 0
# cat("Intersect: ", length(intersect(signsnps[[j]], signsnps[[k]])))
# cat("    Union: ", length(union(signsnps[[j]], signsnps[[k]])), "\n")
}
}
jaccmat <- na.omit(as.vector(jaccmat))
# results[(5 * i + 1):(5 *  i + 5)] <- quantile(jaccmat)
if(gen == 1) results[,1] <- mean(jaccmat)
if(gen == 2) results[,2] <- mean(jaccmat)
}
return(results)
}
library(data.table)
library(doMC)
library(stringr)
library(foreach)
library(ggraptR)
library(data.table)
opts <- list(preschedule = FALSE)
registerDoMC(7)
# setwd("/media/lee/HDD_Array/nwanderson/EpistasisSim/jacccalc/EmpT0hb/")
setwd("~/Documents/GitHub/EpistasisSim/hb0.5/")
empdata <- fread(file = "sortedhbdata.csv")
setwd("/Volumes/T7/EpistasisSim/hbT0.5")
FFs <- list.files(path = './SLiMouts/')
sim.results <- array(dim = c(1002, 2 * length(FFs)))
sim.results[1,] <- rep(c("positive",
"negative", # 1
"multiplicative", # 2
"directional", # 3
"diminishingReturns", # 4
"stabilizing"), # 5
each = 2, times = 1)
sim.results[2,] <- rep(c(6,10), each = 1, times = 6)
for(ff in FFs){
files <- list.files(path = paste("./SLiMouts/", ff, "/", sep = ''))
meanjaccs <- foreach(i = 1:length(files), .options.multicore=opts, .combine = 'rbind') %dopar%{
sim = files[i]
path <- paste("./SLiMouts/", ff, "/", sim, sep = '')
rawout <- read.csv(file = path)
rawout <- rawout[,-ncol(rawout)]
return(GetJaccards(rawout = rawout, cutoffs = empdata$Gen10_neutAFC999))
}
if(ff == "positive"){sim.results[3:1002, 1:2] <- meanjaccs}
if(ff == "negative"){sim.results[3:1002, 3:4] <- meanjaccs}
if(ff == "multiplicative"){sim.results[3:1002, 5:6] <- meanjaccs}
if(ff == "directional"){sim.results[3:1002, 7:8] <- meanjaccs}
if(ff == "diminishingReturns"){sim.results[3:1002, 9:10] <- meanjaccs}
if(ff == "stabilizing"){sim.results[3:1002, 11:12] <- meanjaccs}
}
setwd("~/Documents/GitHub/EpistasisSim/hb0.5/")
write.csv(sim.results, file = "sim.results.csv")
sim.results
is.na(sim.results)
sum(is.na(sim.results))
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/snps0.5")
mult <- 6
iter = 1000
seed <- sample(1:2^15, mult * iter)
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1000)
a <- rep(c(8,-8,0, 0, 40, 0), each = 1000)
s <- rep(c(0,0,0,0.1,0,0), each = 1000)
r <- rep(c(0,0,0,-75,0,0), each = 1000)
b <- rep(c(0,0,0,-0.41,-0.395,0), each = 1000)
mu <- rep(c(0,0,0,0,0,0.435), each = 1000)
std <- rep(c(0,0,0,0,0,0.0175), each = 1000)
dat <- cbind(seed, fitnessFunction, a,s,r,b,mu,std)
fwrite(dat, file = 'params.txt', col.names = F)
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/snps0.5/")
x <- fread(file = "haplotype_blocks.snp_res.csv")
y <- readRDS("hap_block_snps.neutral_AFC_cutoffs.RDS")
z <- fread(file = "mutdriftinfo.csv")
x <- fread(file = "haplotype_blocks.snp_res.csv")
y <- readRDS("hap_block_snps.neutral_AFC_cutoffs.RDS")
z <- fread(file = "mutdriftinfo.csv")
tmpdata <- cbind(x$chr, x$pos, x$haplotype_block, y$T0, x$selCoef, x$cov, y$Gen10_neutAFC99, y$Gen10_neutAFC999)
y <- readRDS("hap_block_snps.neutral_AFC_cutoffs.RDS")
x <- fread(file = "haplotype_blocks.snp_res.csv")
x <- readRDS(file = "haplotype_blocks.snp_res.RDS")
y <- readRDS("hap_block_snps.neutral_AFC_cutoffs.RDS")
z <- fread(file = "mutdriftinfo.csv")
tmpdata <- cbind(x$chr, x$pos, x$haplotype_block, y$T0, x$selCoef, x$cov, y$Gen10_neutAFC99, y$Gen10_neutAFC999)
tmpdata <- data.frame(tmpdata)
colnames(tmpdata) <- c("chr", 'pos', 'haplotype_block', 'T0', 'selCoef', 'cov', 'Gen10_neutAFC99', 'Gen10_neutAFC999')
tmpdata$pos <- as.integer(tmpdata$pos)
tmpdata$T0 <- as.numeric(tmpdata$T0)
tmpdata$selCoef <- as.numeric(tmpdata$selCoef)
tmpdata$cov <- as.integer(tmpdata$cov)
tmpdata$Gen10_neutAFC99 <- as.numeric(tmpdata$Gen10_neutAFC99)
tmpdata$Gen10_neutAFC999 <- as.numeric(tmpdata$Gen10_neutAFC999)
sorteddata <- c()
for(haps in unique(tmpdata$haplotype_block)){
hapdata <- tmpdata[which(tmpdata$haplotype_block == haps),]
sorteddata <- rbind(sorteddata,hapdata[order(as.integer(hapdata$pos)),])
}
sorteddata$T0 <- rep(0.5, times = 121)
sorteddata$T0 <- rep(0.5, times = 4977)
sorteddata$Gen10_neutAFC99 <- rep(mean(z$Gen10_AFC99[which(z$AF == 0.5)]), times = 4977)
sorteddata$Gen10_neutAFC999 <- rep(mean(z$Gen10_AFC999[which(z$AF == 0.5)]), times = 4977)
RF.bp <- 0.016 / 1e6
RecomFractions <- c()
for(i in unique(sorteddata$haplotype_block)){
pos <- as.numeric(sorteddata$pos[sorteddata$haplotype_block == i])
if(min(diff(pos)) < 0) stop()
RF <- RF.bp * diff(pos)
RecomFractions <- c(RecomFractions, RF, 0.5)
}
RecomFractions <- RecomFractions[-length(RecomFractions)]
write.csv(sorteddata, file = 'sortedsnpdata.csv')
write.csv(RecomFractions, file = 'RecomMap.csv')
