pa<-0.3
pb<-0.2
po<-0.5
numit <- 20 # number of iterations
freq <- getFreq(na, nb, nab, no, numit, pa, pb, po)
freq
################
## Question 3 ##
################
getFreq <- function(na, nb, nab, no, numit, pa, pb, po){
N <- na + nb + nab + no
freq <- array(0,c(numit,3))
freq[1,1] <- pa
freq[1,2] <- pb
freq[1,3] <- po
for (i in 2:numit) {
naa<-na*pa^2/(pa^2+2*pa*po)
nao<-2*pa*po*na/(pa^2+2*pa*po)
nbb<-nb*pb^2/(pb^2+2*pb*po)
nbo<-2*pb*po*nb/(pb^2+2*pb*po)
pa<-(2*naa+nao+nab)/(2*N)
pb<-(2*nbb+nbo+nab)/(2*N)
po<-(2*no+nao+nbo)/(2*N)
freq[i,1] <- pa
freq[i,2] <- pb
freq[i,3] <- po
}
return(freq)
}
freq <- getFreq(na, nb, nab, no, numit, pa, pb, po)
freq
freq
plot (freq[,1], type="l", ylab = "Frequency of allele A", xlab = "Iteration")
# starting values for pA, pB and pO
pa<-0.005
pb<-0.99
po<-0.005
numit <- 20 # number of iterations
freq2 <- getFreq(na, nb, nab, no, numit, pa, pb, po)
freq2
plot (freq[,1], type="l", ylab = "Frequency of allele A", xlab = "Iteration")
plot (freq1[,1], type="l", ylab = "Frequency of allele A", xlab = "Iteration")
################
## Question 3 ##
################
getFreq <- function(na, nb, nab, no, numit, pa, pb, po){
N <- na + nb + nab + no
freq <- array(0,c(numit,3))
freq[1,1] <- pa
freq[1,2] <- pb
freq[1,3] <- po
for (i in 2:numit) {
naa<-na*pa^2/(pa^2+2*pa*po)
nao<-2*pa*po*na/(pa^2+2*pa*po)
nbb<-nb*pb^2/(pb^2+2*pb*po)
nbo<-2*pb*po*nb/(pb^2+2*pb*po)
pa<-(2*naa+nao+nab)/(2*N)
pb<-(2*nbb+nbo+nab)/(2*N)
po<-(2*no+nao+nbo)/(2*N)
freq[i,1] <- pa
freq[i,2] <- pb
freq[i,3] <- po
}
return(freq)
}
## starting place 1
na <- 186
nb <- 38
nab <- 13
no <- 284
# starting values for pA, pB and pO
pa<-0.3
pb<-0.2
po<-0.5
numit <- 20 # number of iterations
freq1 <- getFreq(na, nb, nab, no, numit, pa, pb, po)
freq1
## starting place 2
na <- 186
nb <- 38
nab <- 13
no <- 284
# starting values for pA, pB and pO
pa<-0.005
pb<-0.99
po<-0.005
numit <- 20 # number of iterations
freq2 <- getFreq(na, nb, nab, no, numit, pa, pb, po)
freq2
## starting place 3
na <- 186
nb <- 38
nab <- 13
no <- 284
# starting values for pA, pB and pO
pa<-0.33
pb<-0.33
po<-0.33
numit <- 20 # number of iterations
freq3 <- getFreq(na, nb, nab, no, numit, pa, pb, po)
freq3
plot (freq1[,1], type="l", ylab = "Frequency of allele A", xlab = "Iteration")
lines(freq2[1,], col = "red")
freq2
lines(freq2[,1], col = "red")
plot (freq1[,1], type="l", ylab = "Frequency of allele A", xlab = "Iteration")
lines(freq2[,1], col = "red")
plot (freq1[,1], type="l", ylab = "Frequency of allele A",
xlab = "Iteration", ylim = c(0,1))
lines(freq2[,1], col = "red")
lines(freq3[,1], col = "blue")
lines(freq3[,1], col = "blue")
plot (freq1[,1], type="l", ylab = "Frequency of allele A",
xlab = "Iteration", ylim = c(0,1))
lines(freq2[,1], col = "red")
lines(freq3[,1], col = "blue")
plot (freq1[,2], type="l", ylab = "Frequency of allele B",
xlab = "Iteration", ylim = c(0,1))
lines(freq2[,2], col = "red")
lines(freq3[,2], col = "blue")
plot (freq1[,3], type="l", ylab = "Frequency of allele O",
xlab = "Iteration", ylim = c(0,1))
lines(freq2[,3], col = "red")
lines(freq3[,3], col = "blue")
################
## Question 4 ##
################
getNextGenFreq(p, wAA, wAa, waa){
q <- i - p
wbar <- p ^2 * wAA + 2 * p * q * wAa + q ^ 2 * waa
pprime <- (p^2 * wAA + p * q * wAa) / wbar
return(pprime)
}
################
## Question 4 ##
################
getNextGenFreq <- function(p, wAA, wAa, waa){
q <- i - p
wbar <- p ^2 * wAA + 2 * p * q * wAa + q ^ 2 * waa
pprime <- (p^2 * wAA + p * q * wAa) / wbar
return(pprime)
}
################
## Question 4 ##
################
getNextGenFreq <- function(p, wAA, wAa, waa){
q <- i - p
wbar <- p ^2 * wAA + 2 * p * q * wAa + q ^ 2 * waa
pprime <- (p^2 * wAA + p * q * wAa) / wbar
return(pprime)
}
p0 <- 0.9
wAA <- wAa <- 2
waa <- 1
freq <- vector(length = 21)
freq[1] <- p0
for(gen in 2:21){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
################
## Question 4 ##
################
getNextGenFreq <- function(p, wAA, wAa, waa){
q <- 1 - p
wbar <- p ^2 * wAA + 2 * p * q * wAa + q ^ 2 * waa
pprime <- (p^2 * wAA + p * q * wAa) / wbar
return(pprime)
}
p0 <- 0.9
wAA <- wAa <- 2
waa <- 1
freq <- vector(length = 21)
freq[1] <- p0
for(gen in 2:21){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq)
plot(freq)
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq)
p0 <- 0.9
wAA <- wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq)
plot(freq, type = "l")
################
## Question 3 ##
################
getFreq <- function(na, nb, nab, no, numit, pa, pb, po){
N <- na + nb + nab + no
freq <- array(0,c(numit,3))
freq[1,1] <- pa
freq[1,2] <- pb
freq[1,3] <- po
for (i in 2:numit) {
naa<-na*pa^2/(pa^2+2*pa*po)
nao<-2*pa*po*na/(pa^2+2*pa*po)
nbb<-nb*pb^2/(pb^2+2*pb*po)
nbo<-2*pb*po*nb/(pb^2+2*pb*po)
pa<-(2*naa+nao+nab)/(2*N)
pb<-(2*nbb+nbo+nab)/(2*N)
po<-(2*no+nao+nbo)/(2*N)
freq[i,1] <- pa
freq[i,2] <- pb
freq[i,3] <- po
}
return(freq)
}
## starting place 1
na <- 186
nb <- 38
nab <- 13
no <- 284
# starting values for pA, pB and pO
pa<-0.3
pb<-0.2
po<-0.5
numit <- 20 # number of iterations
freq1 <- getFreq(na, nb, nab, no, numit, pa, pb, po)
freq1
## starting place 2
na <- 186
nb <- 38
nab <- 13
no <- 284
# starting values for pA, pB and pO
pa<-0.005
pb<-0.99
po<-0.005
numit <- 20 # number of iterations
freq2 <- getFreq(na, nb, nab, no, numit, pa, pb, po)
freq2
## starting place 3
na <- 186
nb <- 38
nab <- 13
no <- 284
# starting values for pA, pB and pO
pa<-0.999
pb<-0.0005
po<-0.0005
numit <- 20 # number of iterations
freq3 <- getFreq(na, nb, nab, no, numit, pa, pb, po)
freq3
plot (freq1[,1], type="l", ylab = "Frequency of allele A",
xlab = "Iteration", ylim = c(0,1))
lines(freq2[,1], col = "red")
lines(freq3[,1], col = "blue")
plot (freq1[,2], type="l", ylab = "Frequency of allele B",
xlab = "Iteration", ylim = c(0,1))
lines(freq2[,2], col = "red")
lines(freq3[,2], col = "blue")
plot (freq1[,3], type="l", ylab = "Frequency of allele O",
xlab = "Iteration", ylim = c(0,1))
lines(freq2[,3], col = "red")
lines(freq3[,3], col = "blue")
################
## Question 4 ##
################
getNextGenFreq <- function(p, wAA, wAa, waa){
q <- 1 - p
wbar <- p ^2 * wAA + 2 * p * q * wAa + q ^ 2 * waa
pprime <- (p^2 * wAA + p * q * wAa) / wbar
return(pprime)
}
p0 <- 0.9
wAA <- wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
wAA <- 2
wAa <- 1.5
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
wAA <- 1
wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
p0 <- 0.5
wAA <- wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
wAA <- 2
wAa <- 1.5
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
wAA <- 1
wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
p0 <- 0.1
wAA <- wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
wAA <- 2
wAa <- 1.5
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
wAA <- 1
wAa <- 2
waa <- 1
freq <- vector(length = 201)
freq[1] <- p0
for(gen in 2:201){
freq[gen] = getNextGenFreq(freq[gen - 1], wAA, wAa, waa)
}
plot(freq, type = "l")
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/nlociAlpha")
mult <- 6
iter = 1000
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
seed <- sample(1:2^34, 7800)
fitnessFunction <- rep(c(1,1,1,1,1,1,2), each = 1300)
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/nlociAlpha")
mult <- 6
iter = 1000
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
seed <- sample(1:2^34, 7800)
fitnessFunction <- rep(c(1,1,1,1,1,1,2), each = 1300)
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
seed <- sample(1:2^34, 9100)
fitnessFunction <- rep(c(1,1,1,1,1,1,2), each = 1300)
a <- rep(c(8,-8,1,-1,15,-15,0), each = 1300)
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
seed <- sample(1:2^34, 9100)
fitnessFunction <- rep(c(1,1,1,1,1,1,2), each = 1300)
a <- rep(c(8,-8,1,-1,15,-15,0), each = 1300)
s <- rep(0, times = 9100)
r <- rep(0, times = 9100)
b <- rep(0, times = 9100)
mu <- rep(0, times = 9100)
std <- rep(0, times = 9100)
nloci <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 100, times = 7)
sim <- 0:(9100-1)
dat <- cbind(seed, fitnessFunction, a, s, r, b, mu, std, nloci, sim)
fwrite(dat, file = 'params.txt', col.names = F)
sampledloci <- array(dim = c(9100, 121))
for(n in 1:length(nloci)){
sampledloci[n,1:nloci[n]] <- sample(0:120,nloci[n])
}
fwrite(sampledloci, file = "sampledloci.csv", col.names = F)
paste("alpha=", c(8,-8,1,-1,15,-15,0), sep = "")
alphas <- paste("alpha=", c(8,-8,1,-1,15,-15,0), sep = "")
# setwd("/media/nathan/T7/EpistasisSim/nlociAlpha")
setwd("/Volumes/T7/EpistasisSim/nlocihb")
filenames <- list.files(path = './SLiMouts/')
# setwd("/media/nathan/T7/EpistasisSim/nlociAlpha")
setwd("/Volumes/T7/EpistasisSim/nlocihb")
filenames <- list.files(path = './SLiMouts/')
# setwd("/media/nathan/T7/EpistasisSim/nlociAlpha")
setwd("/Volumes/T7/EpistasisSim/nlociAlpha")
filenames <- list.files(path = './SLiMouts/')
install.packages("tidyverse")
libary(tidyverse)
library(tidyverse)
alphas <- paste("alpha=", c(8,-8,1,-1,15,-15,0), sep = "")
strsplit(filenames[i], "_")
i=1
strsplit(filenames[i], "_")
split <- strsplit(filenames[i], "_")[[1]]
split[length(split)] <- substr(split[length(split)], 1, nchar(split[length(split)]) - 4)
split
?else if
?elseif
?if
??if
# setwd("/media/nathan/T7/EpistasisSim/nlociAlpha")
setwd("/Volumes/T7/EpistasisSim/nlociAlpha")
filenames <- list.files(path = './SLiMouts/')
parsefilenames(filenames = filenames)
########################
## Internal Functions ##
########################
parsefilenames <- function(filenames){
alphas <- paste("alpha=", c(8,-8,1,-1,15,-15,0), sep = "")
for(a in alphas){
system(paste("mkdir ./SLiMouts/", a, sep = ""))
}
for(i in 1:length(filenames)){
split <- strsplit(filenames[i], "_")[[1]]
split[length(split)] <- substr(split[length(split)], 1, nchar(split[length(split)]) - 4)
if(split[3] == "a=8") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/alpha=8/", sep = ""))
if(split[3] == "a=-8") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/alpha=-8/", sep = ""))
if(split[3] == "a=1") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/alpha=1/", sep = ""))
if(split[3] == "a=-1") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/alpha=-1/", sep = ""))
if(split[3] == "a=15") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/alpha=15/", sep = ""))
if(split[3] == "a=-15") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/alpha=-15/", sep = ""))
if(split[3] == "a=0") system(paste("mv ./SLiMouts/", filenames[i], " ./SLiMouts/alpha=0/", sep = ""))
}
}
parsefilenames(filenames = filenames)
library(data.table)
library(doMC)
library(stringr)
library(foreach)
library(ggraptR)
opts <- list(preschedule = FALSE)
registerDoMC(7)
setwd("~/Documents/GitHub/EpistasisSim/nlociAlpha/")
# setwd("~/Documents/GitHub/EpistasisSim/nlociAlpha/")
empdata <- fread(file = "sortedhbdata.csv")
# setwd("/media/nathan/T7/EpistasisSim/nlocihb/")
# setwd("/Volumes/T7/EpistasisSim/nlociAlpha")
FFs <- list.files(path = './SLiMouts/')
setwd("/Volumes/T7/EpistasisSim/nlociAlpha")
# setwd("/media/nathan/T7/EpistasisSim/nlocihb/")
# setwd("/Volumes/T7/EpistasisSim/nlociAlpha")
alphas <- list.files(path = './SLiMouts/')
sim.results <- array(dim = c(103, 2 * length(FFs) * 13))
sim.results <- array(dim = c(103, 2 * length(alphas) * 13))
rep(paste("alpha=", c(8,-8,1,-1,15,-15,0), sep = ""),
each = 2, times = 13)
length(rep(paste("alpha=", c(8,-8,1,-1,15,-15,0), sep = ""), each = 2, times = 13))
sim.results[2,] <- rep(c(6,10), each = 1, times = 6*13)
sim.results <- array(dim = c(103, 2 * length(alphas) * 13))
sim.results[1,] <- rep(paste("alpha=", c(8,-8,1,-1,15,-15,0), sep = ""),
each = 2, times = 13)
sim.results[2,] <- rep(c(6,10), each = 1, times = 7*13)
7 * 13
sim.results[3,] <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 12, times = 1)
sim.results[3,] <- rep(c(seq(from = 10, to = 120, by = 10), 121), each = 14, times = 1)
library(data.table)
library(doMC)
library(stringr)
library(foreach)
library(ggraptR)
opts <- list(preschedule = FALSE)
registerDoMC(7)
setwd("~/Documents/GitHub/EpistasisSim/nlociAlpha/")
empdata <- fread(file = "sortedhbdata.csv")
setwd("/Volumes/T7/EpistasisSim/nlociAlpha")
# setwd("/media/nathan/T7/EpistasisSim/nlocihb/")
# setwd("/Volumes/T7/EpistasisSim/nlociAlpha")
alphas <- list.files(path = './SLiMouts/')
setwd("/Volumes/T7/EpistasisSim/nlociAlpha")
