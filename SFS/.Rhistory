#   theme_bw() +
#   theme(text=element_text(family="sans",
#                           face="plain",
#                           color="#000000",
#                           size=15, hjust=0.5, vjust=0.5)) +
#   guides(fill=guide_legend(title="Fitness Function")) +
#   xlab("Proportion") +
#   ylab("Density") +
#   scale_fill_manual("Group",values=turbo(11)[c(4,6,9,11)]) +
#   scale_x_continuous(breaks = sort(unique(plotdat$Proportion))) +
#   theme(panel.grid = element_blank())
plotdat2 <- plotdat %>%
dplyr::count(Proportion, Group) %>%
complete(Group, Proportion, fill = list(n=0)) %>%
group_by(Group) %>%
mutate(Prop = n/sum(n))
plotdat2$Generation <- rep(c(6,10), times = 18)
plotdat2$Gen <- rep(10, times = 36)
# plotdat2 <- rbind(plotdat2,
#                   data.frame(Group = "Directional QT",
#                              Proportion = 0,
#                              n = 0,
#                              Prop = 0,
#                              Generation = 6,
#                              Gen = 6))
plot3 <-  ggplot(plotdat2, aes(x=(8 * Proportion), fill=Group)) +
geom_bar(aes(y=Prop),
stat = "identity",
position=position_dodge2(reverse = FALSE,preserve ="single"),
width = .8) +
# geom_histogram(aes(y=..density..),
#                stat="bin",
#                position=position_dodge2(reverse = FALSE,preserve ="single"),
#                alpha=1,
#                breaks = sort(c(unique(plotdat$Proportion) + 0.045,
#                                unique(plotdat$Proportion) - 0.045)),
#                center = 1) +
theme_bw() +
labs(tag = "c",
title = "Replicate\n Frequency Spectra") +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20, hjust=0.5, vjust=0.5)) +
guides(color=guide_legend(title="Fitness Function")) +
xlab("Number of Lines") +
ylab("Proportion of Hap Blocks") +
# scale_x_continuous(breaks = sort(unique(plotdat$Proportion))) +
theme(panel.grid = element_blank(),
legend.key.height = unit(3,"lines"),
legend.text = element_text(vjust = 0.5)) +
scale_fill_manual("Group",values=turbo(11)[c(1,4,6,9,11)],
limits = c("Negative Epistasis (\u03b1 = - 36.5)", "Directional QT",
"Multiplicative (\u03b1 = 0)",
"Positive Epistasis (\u03b1 = 36.5)",
"Empirical")) +
scale_color_manual("Group",values=turbo(11)[c(1,4,6,9,11)],
limits = c("Negative Epistasis (\u03b1 = - 36.5)", "Directional QT",
"Multiplicative (\u03b1 = 0)",
"Positive Epistasis (\u03b1 = 36.5)",
"Empirical")) +
# geom_point(aes(shape=as.factor(Generation),
#                colour=Group,
#                y=Prop),
#            stat="identity",
#            position="identity",
#            alpha=0,
#            size=4) +
# geom_point(aes(shape=as.factor(Gen),
#                color=Group,
#                y=Prop),
#            stat="identity",
#            position=position_dodge2(reverse = FALSE,preserve ="single", width = 0.7),
#            alpha=c(rep(1, times = 36)),
#            size=4) +
guides(shape="none") +
# geom_line(aes(y=Prop, x=(8 * Proportion), color=Group),
#                       stat="identity",
#                       position=position_dodge2(reverse = FALSE,preserve ="single", width = 0.7),
#                       alpha=0.6,
#                       size = 0.75,
#           linetype = "dashed") +
guides(fill=guide_legend(title="Fitness Function")) +
theme(plot.tag = element_text(face = "bold"))
# plot3 <- ggplot(plotdat2, aes(x=(8 * Proportion), color=Group)) +
#   geom_point(aes(y=Prop),
#              stat="identity",
#              position="identity",
#              alpha=0.6,
#              size=4) +
#   geom_line(aes(y=Prop),
#             stat="identity",
#             position="identity",
#             alpha=0.6,
#             size = 1.25) +
#   theme_bw() +
#   theme(text=element_text(family="sans",
#                           face="plain",
#                           color="#000000",
#                           size=15, hjust=0.5, vjust=0.5)) +
#   guides(fill=guide_legend(title="Fitness Function")) +
#   xlab("Number of Lines") +
#   ylab("Proportion of SNPs") +
#   scale_color_manual("Group",values=turbo(11)[c(1,4,6,9,11)],
#                      limits = c("alpha = - 36.5", "Directional QT",
#                                 "Multiplicative\n(alpha = 0)",
#                                 "Positive Epistasis\n(alpha = 36.5)",
#                                 "Empirical")) +
#   scale_x_continuous(breaks = 8 * sort(unique(plotdat$Proportion))) +
#   theme(panel.grid = element_blank())
#
###################################
plot2 + plot1 + plot3
######
totaldata <- array()
setwd("~/Documents/GitHub/EpistasisSim/nlociAlphahb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "alpha=8") fitfun <- c(fitfun, "E. alpha = 8")
if(jaccmatrix[1,c] == "alpha=-8") fitfun <- c(fitfun, "B. alpha = - 8")
if(jaccmatrix[1,c] == "alpha=1") fitfun <- c(fitfun, "D. alpha = 1")
if(jaccmatrix[1,c] == "alpha=-1") fitfun <- c(fitfun, "B. alpha = - 1")
if(jaccmatrix[1,c] == "alpha=36.5629892630851") fitfun <- c(fitfun, "C. alpha = 36.5")
if(jaccmatrix[1,c] == "alpha=-36.5629892630851") fitfun <- c(fitfun, "A. alpha = -36.5")
if(jaccmatrix[1,c] == "alpha=0") fitfun <- c(fitfun, "B. alpha = 0\n    (Multiplicative)")
}
fitfun <- c(fitfun, rep('E. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 182)
meanjac <- c(colMeans(meanjac), empjaccs)
sdjac <- jaccmatrix[4:103,]
sdjac <- mapply(sdjac, FUN=as.numeric)
sdjac <- matrix(data = sdjac, nrow = 100, ncol = 182)
sdjac <- c(colSds(sdjac), empjaccs)
U95 <- c()
L95 <- c()
tmp <- jaccmatrix[4:103,]
tmp <- mapply(tmp, FUN=as.numeric)
tmp <- matrix(data = tmp, nrow = 100, ncol = 182)
for(c in 1:ncol(tmp)){
U95 <- c(U95, quantile(tmp[,c], probs = c(0.25,0.75))[2])
L95 <- c(L95, quantile(tmp[,c], probs = c(0.25,0.75))[1])
}
rm(tmp)
U95 <- c(U95, empjaccs)
L95 <- c(L95, empjaccs)
data <- data.frame(fitfun, Generation, nloci, meanjac, sdjac, U95, L95)
data <- data[-which(data$fitfun == "B. alpha = - 8" | data$fitfun == "E. alpha = 8" |
data$fitfun == "D. alpha = 1" | data$fitfun == "B. alpha = - 1"),]
totaldata <- rbind(totaldata, data)
setwd("~/Documents/GitHub/EpistasisSim/nlocihb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
fitfun <- c()
for(c in 1:ncol(jaccmatrix)){
if(jaccmatrix[1,c] == "positive") fitfun <- c(fitfun, "B. Positive Epistasis")
if(jaccmatrix[1,c] == "negative") fitfun <- c(fitfun, "C. Negative Epistasis")
if(jaccmatrix[1,c] == "multiplicative") fitfun <- c(fitfun, "A. Multiplicative")
if(jaccmatrix[1,c] == "directional") fitfun <- c(fitfun, "D. Directional QT")
if(jaccmatrix[1,c] == "diminishingReturns") fitfun <- c(fitfun, "E. Truncating QT")
if(jaccmatrix[1,c] == "stabilizing") fitfun <- c(fitfun, "F. Stabilizing QT")
}
fitfun <- c(fitfun, rep('G. Empirical', times = 2))
Generation <- c(as.numeric(jaccmatrix[2,]), 6,10)
nloci <- c(as.numeric(jaccmatrix[3,]), 121,121)
meanjac <- jaccmatrix[4:103,]
meanjac <- mapply(meanjac, FUN=as.numeric)
meanjac <- matrix(data = meanjac, nrow = 100, ncol = 156)
meanjac <- c(colMeans(meanjac), empjaccs)
sdjac <- jaccmatrix[4:103,]
sdjac <- mapply(sdjac, FUN=as.numeric)
sdjac <- matrix(data = sdjac, nrow = 100, ncol = 156)
sdjac <- c(colSds(sdjac), empjaccs)
U95 <- c()
L95 <- c()
tmp <- jaccmatrix[4:103,]
tmp <- mapply(tmp, FUN=as.numeric)
tmp <- matrix(data = tmp, nrow = 100, ncol = 156)
for(c in 1:ncol(tmp)){
U95 <- c(U95, quantile(tmp[,c], probs = c(0.25,0.75))[2])
L95 <- c(L95, quantile(tmp[,c], probs = c(0.25,0.75))[1])
}
rm(tmp)
U95 <- c(U95, empjaccs)
L95 <- c(L95, empjaccs)
data = data.frame(fitfun, Generation, nloci, meanjac, sdjac, U95, L95)
data = data[which(data$fitfun == "D. Directional QT"),]
totaldata <- rbind(totaldata, data)
totaldata <- totaldata[-which(totaldata$nloci == 120),]
totaldata <- totaldata[-which(totaldata$fitfun == "E. Empirical"),]
totaldata <- totaldata[-1,]
totaldata$fitfun <- factor(totaldata$fitfun,
levels = sort(unique(totaldata$fitfun)),
labels = c("alpha = -36.5",
"alpha = 0\n    (Multiplicative)",
"alpha = 36.5", "Directional QT"))
################################
### \u03b1
plot1 <- ggplot(totaldata, aes(y=meanjac, x=nloci)) +
geom_hline(yintercept=empjaccs[1],
linetype="dotdash",
color = turbo(11)[11], size = 0.75) +
geom_hline(yintercept=empjaccs[2],
linetype="dashed",
color = turbo(11)[11], size  = 0.75) +
geom_point(aes(shape=as.factor(Generation),
colour=fitfun),
stat="identity",
position="identity",
alpha=1,
size=2.5) +
geom_line(aes(colour=fitfun,
shape = as.factor(Generation)),
stat="identity",
position="identity",
alpha=0.6,
size = 1) +
theme_bw() +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
scale_size(range=c(1, 3)) +
guides(shape=guide_legend(title = "Generation",
override.aes = list(alpha=1))) +
theme(legend.position = "top") +
guides(colour = "none") +
xlab("Number of Loci") +
ylab("Mean Jaccard Score") +
labs(tag = "b",
title = "Genetic Parallelism\n ~ Number of Loci") +
scale_color_manual(values = turbo(11)[c(1,6,9,4,11)]) +
scale_x_continuous(breaks = c(seq(from = 20,
to = 100,
by = 20),121)) +
# scale_y_continuous(sec.axis = sec_axis(~ ., breaks = empjaccs,
#                                        labels = c("Empirical\nGen 6",
#                                                   "Empirical\nGen 10"))) +
geom_errorbar(aes(colour=fitfun,
ymin=L95,
ymax=U95),
width=0, alpha=1, size=1.2) +
geom_ribbon(aes(colour=fitfun,
shape = as.factor(Generation),
fill = fitfun,
ymin=L95,
ymax=U95),
alpha = 0.2, colour = NA,
show.legend = F) +
coord_cartesian(xlim = c(10,121), clip = 'off') +
scale_fill_manual(values = turbo(11)[c(1,6,9,4,11)]) +
theme(axis.text.y.right = element_text(size = 12,
face = "bold",
color = turbo(11)[11])) +
theme(axis.text.y.left = element_blank()) +
theme(axis.title.y.left = element_blank()) +
theme(panel.grid = element_blank()) +
theme(plot.tag = element_text(face = "bold"))
###################################
## Main Text: Epistasis Analysis ##
##################################
totaldata <- array()
setwd("~/Documents/GitHub/EpistasisSim/alphaComparison")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
treatment <- c(rep(c("B. alpha = 8",
"C. alpha = - 8",
"D. alpha = 36.5",
"A. alpha = 0\n    (Multiplicative)"), each = 2000))
generation <- c(rep(c(6,10), each = 1000, times = 4))
jaccards <- c()
for(i in 1:8){
jaccards <- c(jaccards, jaccmatrix[3:1002,i])
}
jaccards <- as.numeric(c(jaccards))
data <- data.frame(treatment, generation, jaccards)
totaldata <- rbind(totaldata, data)
setwd("~/Documents/GitHub/EpistasisSim/EmpT0hb")
empjaccs <- readRDS(file = 'hap_blocks.jaccard.neutral999.RDS')
tmp <- c(mean(empjaccs[[1]]), mean(empjaccs[[2]]))
empjaccs <- tmp
rm(tmp)
jaccmatrix <- as.matrix(fread(file = 'sim.results.csv'))
jaccmatrix <- jaccmatrix[-1,-1]
treatment <- c(rep(c("B. Positive Epistasis",
"C. Negative Epistasis",
"A. Multiplicative",
"D. Directional QT",
"E. Truncating QT",
"F. Stabilizing QT"), each = 2000),
rep("G. Empirical", each = 2))
generation <- c(rep(c(6,10), each = 1000, times = 6),
c(6,10))
jaccards <- c()
for(i in 1:12){
jaccards <- c(jaccards, jaccmatrix[3:1002,i])
}
jaccards <- as.numeric(c(jaccards, empjaccs))
title <- rep("121 Hap Blocks. Empirical T0", times = length(jaccards))
data <- data.frame(treatment, generation, jaccards)
totaldata <- rbind(totaldata, data)
totaldata <- totaldata[-1,]
totaldata <- totaldata[which(totaldata$treatment == "D. alpha = 36.5" |
totaldata$treatment == "A. alpha = 0\n    (Multiplicative)" |
totaldata$treatment == "D. Directional QT"),]
totaldata$treatment <-  factor(totaldata$treatment,
levels = sort(unique(totaldata$treatment)),
labels = c("Multiplicative\n(\u03b1 = 0)",
"Positive Epistasis\n(\u03b1 = 36.5)", "Directional QT"))
##################################
plot2 <-  ggplot(totaldata, aes(y=jaccards,
x=as.factor(treatment))) +
geom_hline(yintercept=empjaccs[1],
linetype="dotdash",
color = turbo(11)[11],
size = .75) +
geom_hline(yintercept=empjaccs[2],
linetype="dashed",
color = turbo(11)[11],
size  = .75) +
geom_boxplot(aes(fill=as.factor(generation)),
stat="boxplot",
position="dodge",
alpha=1, width=0.3) +
theme_bw() +
labs(tag = "a",
title = "Genetic Parallelism\n ~ Fitness Function") +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20,
hjust=0.5,
vjust=0.5)) +
guides(fill=guide_legend(title="Generation")) +
xlab("Fitness Function") +
ylab("Mean Jaccard Score") +
scale_y_continuous(sec.axis = sec_axis(~ ., breaks = empjaccs,
labels = c("Empirical\nGen 6",
"Empirical\nGen 10")),
limits = c(0,1)) +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
hjust=1)) +
scale_color_manual(values = viridis(12)[c(3,12)]) +
scale_fill_manual(values = viridis(12)[c(3,12)]) +
theme(axis.text.y.right = element_text(size = 12,
face = "bold",
color = turbo(11)[11],
hjust = 0.5)) +
theme(panel.grid = element_blank()) +
theme(legend.position = "top") +
theme(plot.tag = element_text(face = "bold"))
###################################
## Main: Replicate Freq Spectrum ##
###################################
setwd("~/Documents/GitHub/EpistasisSim/SFS")
load(file = "sim.results.RData")
plotdat <- data.frame("Group" = c(rep("B. Multiplicative", length(sim.results$`alpha=0`)),
rep("C. Positive Epistasis", length(sim.results$`alpha=36.5629892630851`)),
rep("A. Directional QT", length(sim.results$directional)),
rep("D. Empirical", length(sim.results$empirical))),
"Proportion" = c(sim.results$`alpha=0`,
sim.results$`alpha=36.5629892630851`,
sim.results$directional,
sim.results$empirical))
plotdat$Group <- factor(plotdat$Group,
levels = sort(unique(plotdat$Group)),
labels = c("Directional QT",
"Multiplicative (\u03b1 = 0)",
"Positive Epistasis (\u03b1 = 36.5)",
"Empirical"))
###################################
# ggplot(plotdat, aes(x=Proportion, fill=Group)) +
#   geom_histogram(aes(y=..density..),
#                  stat="bin",
#                  position=position_dodge2(reverse = FALSE,preserve ="single"),
#                  alpha=1,
#                  breaks = sort(c(unique(plotdat$Proportion) + 0.045,
#                                  unique(plotdat$Proportion) - 0.045)),
#                  center = 1) +
#   theme_bw() +
#   theme(text=element_text(family="sans",
#                           face="plain",
#                           color="#000000",
#                           size=15, hjust=0.5, vjust=0.5)) +
#   guides(fill=guide_legend(title="Fitness Function")) +
#   xlab("Proportion") +
#   ylab("Density") +
#   scale_fill_manual("Group",values=turbo(11)[c(4,6,9,11)]) +
#   scale_x_continuous(breaks = sort(unique(plotdat$Proportion))) +
#   theme(panel.grid = element_blank())
plotdat2 <- plotdat %>%
dplyr::count(Proportion, Group) %>%
complete(Group, Proportion, fill = list(n=0)) %>%
group_by(Group) %>%
mutate(Prop = n/sum(n))
plotdat2$Generation <- rep(c(6,10), times = 18)
plotdat2$Gen <- rep(10, times = 36)
# plotdat2 <- rbind(plotdat2,
#                   data.frame(Group = "Directional QT",
#                              Proportion = 0,
#                              n = 0,
#                              Prop = 0,
#                              Generation = 6,
#                              Gen = 6))
plot3 <-  ggplot(plotdat2, aes(x=(8 * Proportion), fill=Group)) +
geom_bar(aes(y=Prop),
stat = "identity",
position=position_dodge2(reverse = FALSE,preserve ="single"),
width = .85) +
# geom_histogram(aes(y=..density..),
#                stat="bin",
#                position=position_dodge2(reverse = FALSE,preserve ="single"),
#                alpha=1,
#                breaks = sort(c(unique(plotdat$Proportion) + 0.045,
#                                unique(plotdat$Proportion) - 0.045)),
#                center = 1) +
theme_bw() +
labs(tag = "c",
title = "Replicate\n Frequency Spectra") +
theme(text=element_text(family="sans",
face="plain",
color="#000000",
size=20, hjust=0.5, vjust=0.5)) +
guides(color=guide_legend(title="Fitness Function")) +
xlab("Number of Lines") +
ylab("Proportion of Hap Blocks") +
# scale_x_continuous(breaks = sort(unique(plotdat$Proportion))) +
theme(panel.grid = element_blank(),
legend.key.height = unit(3,"lines"),
legend.text = element_text(vjust = 0.5)) +
scale_fill_manual("Group",values=turbo(11)[c(1,4,6,9,11)],
limits = c("Negative Epistasis (\u03b1 = - 36.5)", "Directional QT",
"Multiplicative (\u03b1 = 0)",
"Positive Epistasis (\u03b1 = 36.5)",
"Empirical")) +
scale_color_manual("Group",values=turbo(11)[c(1,4,6,9,11)],
limits = c("Negative Epistasis (\u03b1 = - 36.5)", "Directional QT",
"Multiplicative (\u03b1 = 0)",
"Positive Epistasis (\u03b1 = 36.5)",
"Empirical")) +
# geom_point(aes(shape=as.factor(Generation),
#                colour=Group,
#                y=Prop),
#            stat="identity",
#            position="identity",
#            alpha=0,
#            size=4) +
# geom_point(aes(shape=as.factor(Gen),
#                color=Group,
#                y=Prop),
#            stat="identity",
#            position=position_dodge2(reverse = FALSE,preserve ="single", width = 0.7),
#            alpha=c(rep(1, times = 36)),
#            size=4) +
guides(shape="none") +
# geom_line(aes(y=Prop, x=(8 * Proportion), color=Group),
#                       stat="identity",
#                       position=position_dodge2(reverse = FALSE,preserve ="single", width = 0.7),
#                       alpha=0.6,
#                       size = 0.75,
#           linetype = "dashed") +
guides(fill=guide_legend(title="Fitness Function")) +
theme(plot.tag = element_text(face = "bold"))
# plot3 <- ggplot(plotdat2, aes(x=(8 * Proportion), color=Group)) +
#   geom_point(aes(y=Prop),
#              stat="identity",
#              position="identity",
#              alpha=0.6,
#              size=4) +
#   geom_line(aes(y=Prop),
#             stat="identity",
#             position="identity",
#             alpha=0.6,
#             size = 1.25) +
#   theme_bw() +
#   theme(text=element_text(family="sans",
#                           face="plain",
#                           color="#000000",
#                           size=15, hjust=0.5, vjust=0.5)) +
#   guides(fill=guide_legend(title="Fitness Function")) +
#   xlab("Number of Lines") +
#   ylab("Proportion of SNPs") +
#   scale_color_manual("Group",values=turbo(11)[c(1,4,6,9,11)],
#                      limits = c("alpha = - 36.5", "Directional QT",
#                                 "Multiplicative\n(alpha = 0)",
#                                 "Positive Epistasis\n(alpha = 36.5)",
#                                 "Empirical")) +
#   scale_x_continuous(breaks = 8 * sort(unique(plotdat$Proportion))) +
#   theme(panel.grid = element_blank())
#
###################################
plot2 + plot1 + plot3
