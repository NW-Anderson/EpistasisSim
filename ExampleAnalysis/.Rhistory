hap_block_snps.jaccard.neutral999 <- readRDS("~/Documents/GitHub/EpistasisSim/ExampleAnalysis/hap_block_snps.jaccard.neutral999.RDS")
##  first let's read in the empirical data from david
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/ExampleAnalysis/")
x <- readRDS(file = "haplotype_blocks.snp_res.RDS")
y <- readRDS("hap_block_snps.neutral_AFC_cutoffs.RDS")
?sample
##' parammaker.R example.
##' this R script has two purposes in this analysis.
##' 1st, it creates a matrix containing all of the parameter values fed into slim by the cluster.
##' These include seed values, number of loci, and parameter values
##' 2nd, it creates a dataframe of randomly selected loci to be included in each simulation
############################################################
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/ExampleAnalysis")
## deprecated code
# mult <- 6
# iter = 1000
# fitnessFunction <- rep(c("exponential", # 1
#                          "exponential", # 1
#                          "multiplicative", # 2
#                          "directional", # 3
#                          "diminishingReturns", # 4
#                          "stabilizing" # 5
#                          ), each = 1000)
## randomly sampling seed values for each of the simulations performed.
seed <- sample(1:2^34, 7800)
##' the fitness functions multiplicative, directional (positive and negative), shifted optimum, truncating and directional are labeled
##' 1-5
fitnessFunction <- rep(c(1,1,2,3,4,5), each = 1300)
## creating parameter values for each model, parameters are left as 0 in the models where they are not used.
a <- rep(c(8,-8,0, 0, 40, 0), each = 1300)
s <- rep(c(0,0,0,0.1,0,0), each = 1300)
r <- rep(c(0,0,0,-75,0,0), each = 1300)
b <- rep(c(0,0,0,-0.41,-0.395,0), each = 1300)
mu <- rep(c(0,0,0,0,0,0.435), each = 1300)
std <- rep(c(0,0,0,0,0,0.0175), each = 1300)
## selecting the number of loci that will be used in each simulation.
nloci <- rep(c(round(seq(from = 10, to = 4970, length.out = 12)), 4977), each = 100, times = 6)
## assigning a simulation "number" to each set of seeds and parameter values, this helps with making sure the correct row of some data
## frames are read in by slim within the cluster
sim <- 0:(7800-1)
## deprecated code block
# a <- rep(c(8,-8,0, 0, 40, 0), each = 1000)
# s <- rep(c(0,0,0,0.1,0,0), each = 1000)
# r <- rep(c(0,0,0,-75,0,0), each = 1000)
# b <- rep(c(0,0,0,-0.41,-0.395,0), each = 1000)
# mu <- rep(c(0,0,0,0,0,0.435), each = 1000)
# std <- rep(c(0,0,0,0,0,0.0175), each = 1000)
## saving the parameter data frame for later
dat <- cbind(seed, fitnessFunction, a, s, r, b, mu, std, nloci, sim)
fwrite(dat, file = 'params.txt', col.names = F)
## Here we are randomly selecting loci to be in each simulation
## make the data frame have as many rows as simulations we are running and as many columns as the maximum number of loci
## include in any analysis
sampledloci <- array(dim = c(7800, 4977))
for(n in 1:length(nloci)){
## filling in the data frame with snps which are selected, the rest are left as NAs that are delt with in slim
sampledloci[n,1:nloci[n]] <- sample(0:4976,nloci[n])
}
# saving this dataframe
fwrite(sampledloci, file = "sampledloci.csv", col.names = F)
sim = 1q
sim = 1
(sampledloci[sim,])
na.omit(unlist(sampledloci[sim,]))
sort(na.omit(unlist(sampledloci[sim,])))+1
## first lets sort the snps we sampled
simloci <- sort(na.omit(unlist(sampledloci[sim,])))+1
simloci <- sorteddata[simloci,]
##  first let's read in the empirical data from david
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/ExampleAnalysis/")
## this is the main data frame that contains most of the data we need. However, it includes antiquated AFC cuttoffs
## since this data frame was created, we used the AFC > 99.9% of neutral simulations to identify candidate snps
## but the rest of the info contained should be correct
x <- readRDS(file = "haplotype_blocks.snp_res.RDS")
## the newer cutoff values are in this other dataframe. Along with some information to identify the snps
y <- readRDS("hap_block_snps.neutral_AFC_cutoffs.RDS")
## Here I am taking the useful information from these two dataframes and putting together.
tmpdata <- cbind(x$chr, x$pos, x$haplotype_block, y$T0, x$selCoef, x$cov, y$Gen10_neutAFC99, y$Gen10_neutAFC999)
tmpdata <- data.frame(tmpdata)
colnames(tmpdata) <- c("chr", 'pos', 'haplotype_block', 'T0', 'selCoef', 'cov', 'Gen10_neutAFC99', 'Gen10_neutAFC999')
## fixing some of the classes in the new dataframe.
tmpdata$pos <- as.integer(tmpdata$pos)
## Here I am taking the useful information from these two dataframes and putting together.
tmpdata <- cbind(x$chr, x$pos, x$haplotype_block, y$T0, x$selCoef, x$cov, y$Gen10_neutAFC99, y$Gen10_neutAFC999)
tmpdata <- data.frame(tmpdata)
colnames(tmpdata) <- c("chr", 'pos', 'haplotype_block', 'T0', 'selCoef', 'cov', 'Gen10_neutAFC99', 'Gen10_neutAFC999')
## fixing some of the classes in the new dataframe.
tmpdata$pos <- as.integer(tmpdata$pos)
tmpdata$T0 <- as.numeric(tmpdata$T0)
tmpdata$selCoef <- as.numeric(tmpdata$selCoef)
tmpdata$cov <- as.integer(tmpdata$cov)
tmpdata$Gen10_neutAFC99 <- as.numeric(tmpdata$Gen10_neutAFC99)
tmpdata$Gen10_neutAFC999 <- as.numeric(tmpdata$Gen10_neutAFC999)
## snps were ordered based on thier position on thr chomosome, not position on the haplotype blocks,
## this can cause issues for how the data is read into slim, so we reorder the snps first based on which
## hplotype block they belong to, then by their position on these haplotypeblocks
sorteddata <- c()
for(haps in unique(tmpdata$haplotype_block)){
hapdata <- tmpdata[which(tmpdata$haplotype_block == haps),]
sorteddata <- rbind(sorteddata,hapdata[order(as.integer(hapdata$pos)),])
}
## Next we're gonna make the recombination map for all of the simulations
## T californiculs recombination rate per base pair
RF.bp <- 0.016 / 1e6
## this is a matrix containing all of the loci selected for each simulation in rows
sampledloci <- fread(file = "sampledloci.csv")
## this data frame is formatted the same way as the sampledloci.csv one
RecomFractions <- array(dim = c(7800,4977))
## first lets sort the snps we sampled
simloci <- sort(na.omit(unlist(sampledloci[sim,])))+1
simloci <- sorteddata[simloci,]
unique(simloci$haplotype_block)
i <- unique(simloci$haplotype_block)[1]
##  first let's read in the empirical data from david
library(data.table)
setwd("~/Documents/GitHub/EpistasisSim/ExampleAnalysis/")
## this is the main data frame that contains most of the data we need. However, it includes antiquated AFC cuttoffs
## since this data frame was created, we used the AFC > 99.9% of neutral simulations to identify candidate snps
## but the rest of the info contained should be correct
x <- readRDS(file = "haplotype_blocks.snp_res.RDS")
## the newer cutoff values are in this other dataframe. Along with some information to identify the snps
y <- readRDS("hap_block_snps.neutral_AFC_cutoffs.RDS")
## Here I am taking the useful information from these two dataframes and putting together.
tmpdata <- cbind(x$chr, x$pos, x$haplotype_block, y$T0, x$selCoef, x$cov, y$Gen10_neutAFC99, y$Gen10_neutAFC999)
tmpdata <- data.frame(tmpdata)
colnames(tmpdata) <- c("chr", 'pos', 'haplotype_block', 'T0', 'selCoef', 'cov', 'Gen10_neutAFC99', 'Gen10_neutAFC999')
## fixing some of the classes in the new dataframe.
tmpdata$pos <- as.integer(tmpdata$pos)
tmpdata$T0 <- as.numeric(tmpdata$T0)
tmpdata$selCoef <- as.numeric(tmpdata$selCoef)
tmpdata$cov <- as.integer(tmpdata$cov)
tmpdata$Gen10_neutAFC99 <- as.numeric(tmpdata$Gen10_neutAFC99)
tmpdata$Gen10_neutAFC999 <- as.numeric(tmpdata$Gen10_neutAFC999)
## snps were ordered based on thier position on thr chomosome, not position on the haplotype blocks,
## this can cause issues for how the data is read into slim, so we reorder the snps first based on which
## hplotype block they belong to, then by their position on these haplotypeblocks
sorteddata <- c()
for(haps in unique(tmpdata$haplotype_block)){
hapdata <- tmpdata[which(tmpdata$haplotype_block == haps),]
sorteddata <- rbind(sorteddata,hapdata[order(as.integer(hapdata$pos)),])
}
## Next we're gonna make the recombination map for all of the simulations
## T californiculs recombination rate per base pair
RF.bp <- 0.016 / 1e6
## this is a matrix containing all of the loci selected for each simulation in rows
sampledloci <- fread(file = "sampledloci.csv")
## this data frame is formatted the same way as the sampledloci.csv one
RecomFractions <- array(dim = c(7800,4977))
## looping through each simulation (rows)
for(sim in 1:nrow(sampledloci)){
## first lets sort the snps we sampled
simloci <- sort(na.omit(unlist(sampledloci[sim,])))+1
simloci <- sorteddata[simloci,]
simrecommap <- c()
## then we will sort through the haplotype blocks the snps are possibly located on
for(i in unique(simloci$haplotype_block)){
## finding the position of all of the snps which are located on the current haplotype block
pos <- as.numeric(simloci$pos[simloci$haplotype_block == i])
## this checks that they are indeed in order
if(min(diff(pos)) < 0) stop()
## calculating recombination fraction between snps which share a haplotype block
RF <- RF.bp * diff(pos)
## adding a recombination fraction of 0.5 at the end of the haplotype block to unlink them
simrecommap <- c(simrecommap, RF, 0.5)
}
## getting rid of the final 0.5 because it is unneeded
simrecommap <- simrecommap[-length(simrecommap)]
## saving data into the larger dataframe
RecomFractions[sim,1:length(simrecommap)] <- simrecommap
}
write.csv(sorteddata, file = 'sortedsnpdata.csv')
fwrite(RecomFractions, file = "RecomMap.csv", col.names = F)
